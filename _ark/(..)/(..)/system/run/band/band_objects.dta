#include band_macros.dta
(BandCharacter
   (description "Band Guitarist characters that get specialized by the app")
   (superclasses Character)
   (types)
)
#define COLOR_PRESET_SCRIPT (
   (script
      {do
         ($new_preset_name
            {milo save_color_preset
               {$this get color_normal}
               {$this get color_focus}
               {$this get color_disabled}
               {$this get color_selecting}
            }
         )
         {if {!= "" $new_preset_name}
            {do
               {$this set color_preset $new_preset_name}
               {milo update_open_editor $this}
            }
         }
      }
   )
   (help "Save the current colors as a preset")
)
(BandLabel
   (description "Label with color presets")
   (allowed_dirs PanelDir)
   (superclasses UILabel)
   (ext lbl)
   (editor
      (color_preset
         symbol
         (list {milo get_color_preset_list})
         (post_sync {milo update_open_editor $this})
         (help
            "Color preset. Choose 'custom_colors' to save colors for this instance only"
         )
         (no_test)
      )
      (color_normal
         color
         (post_sync {milo update_open_editor $this})
         (help "color for this state. (This is NOT saved if a preset is used)")
      )
      (color_focus
         color
         (post_sync {milo update_open_editor $this})
         (help "color for this state. (This is NOT saved if a preset is used)")
      )
      (color_disabled
         color
         (post_sync {milo update_open_editor $this})
         (help "color for this state. (This is NOT saved if a preset is used)")
      )
      (color_selecting
         color
         (post_sync {milo update_open_editor $this})
         (help "color for this state. (This is NOT saved if a preset is used)")
      )
      (save_as_preset script COLOR_PRESET_SCRIPT)
   )
   (types)
)
(BandButton
   (description "Button with color presets")
   (allowed_dirs)
   (superclasses UIButton)
   (resource_file "../ui/button.milo")
   (focus_anim_duration 0.1)
   (ext btn)
   (editor
      (color_preset
         symbol
         (list {milo get_color_preset_list})
         (post_sync {milo update_open_editor $this})
         (help
            "Color preset. Choose 'custom_colors' to save colors for this instance only"
         )
         (no_test)
      )
      (color_normal
         color
         (post_sync {milo update_open_editor $this})
         (help "color for this state. (This is NOT saved if a preset is used)")
      )
      (color_focus
         color
         (post_sync {milo update_open_editor $this})
         (help "color for this state. (This is NOT saved if a preset is used)")
      )
      (color_disabled
         color
         (post_sync {milo update_open_editor $this})
         (help "color for this state. (This is NOT saved if a preset is used)")
      )
      (color_selecting
         color
         (post_sync {milo update_open_editor $this})
         (help "color for this state. (This is NOT saved if a preset is used)")
      )
      (save_as_preset script COLOR_PRESET_SCRIPT)
   )
   (types)
)
(BandHighlight
   (description "Special highlight bar that chases the focus component")
   (allowed_dirs PanelDir)
   (superclasses UIComponent)
   (ext hlit)
   (init {$this set_type default})
   (types
      (default
         (resource_file "highlight.milo")
         (anim_duration 0.1)
         (meshes
            ("highlight.mesh"
               (normal "normal.mat")
               (focused "normal.mat")
               (disabled "disabled.mat")
            )
         )
      )
   )
)
(PlayerDiffIcon
   (description "Overloaded player/difficulty display")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext pdiff)
   (editor
      (num_players
         int
         (range 0 4)
         (help "Number of players")
      )
      (diff
         int
         (range 0 3)
         (help "Difficulty")
      )
   )
   (types)
)
(BandList
   (description "Band specific UIList")
   (allowed_dirs)
   (superclasses UIList)
   (init {$this set_type default})
   (ext lst)
   (editor
      (animate_elements
         script
         (script {$this animate_elements FALSE})
         (help "Test element animation")
      )
   )
   (types
      (default
         (resource_file "../ui/list.milo")
         (vertical TRUE)
         (element
            (text
               (object text "list.lbl")
               (colors
                  (normal
                     (normal 0.5 0.5 0.5)
                     (focused 1 1 1)
                     (disabled 0.3 0.3 0.3)
                     (selecting 1 1 1)
                  )
                  (highlight
                     (normal 0.5 0.5 0)
                     (focused 1 1 0)
                     (disabled 0.5 0.5 0)
                     (selecting 1 0 0)
                  )
                  (disabled
                     (normal 0.1 0.1 0)
                     (focused 0.1 0.1 0)
                     (disabled 0.1 0.1 0)
                     (selecting 0.1 0.1 0)
                  )
               )
               (dummy "text")
            )
         )
         (back_arrow "back.mesh")
         (next_arrow "next.mesh")
         (highlight "highlight.mesh")
      )
   )
)
(BandSwatch
   (description "Special list for selecting colors")
   (allowed_dirs PanelDir)
   (superclasses UIList)
   (init {$this set_type default})
   (ext lst)
   (editor
      (color_palette
         object
         (class ColorPalette)
         (help "Palette containing our color options")
      )
   )
   (types
      (default
         (resource_file "swatch.milo")
         (vertical FALSE)
         (element
            (color
               (object mesh "color.mesh")
               (colors
                  (normal 0.3 0.3 0.3)
                  (focused 1 1 1)
                  (disabled 0.1 0.1 0.1)
                  (selecting 1 1 1)
                  (selected 1 1 0)
               )
            )
         )
         (back_arrow "back.mesh")
         (next_arrow "next.mesh")
         (highlight "highlight.mesh")
      )
   )
)
(Label3d
   (description "3d label")
   (superclasses Trans Draw)
   (ext lbl3d)
   (editor
      (text string (help "string to turn into 3d text"))
      (resource file (help "milo file with letter objects"))
      (max_width
         float
         (help "when length is greater than this value, start scaling the phrase")
      )
      (all_caps bool (help "You know you make me want to SHOUT!"))
      (jitter
         (indent
            (jitter_depth float (help "jitter each letter in depth"))
            (jitter_height float (help "jitter each letter in height"))
         )
      )
   )
   (types)
)
(BandCamShot
   (description "Band specific camera shot")
   (superclasses CamShot)
   (allowed_dirs WorldDir LoadingPanelDir)
   (init
      {$this set_type band}
      {$this set
         flags
         {'|' kValidAll kBCSBFacingNull kBCSBDistNull}
      }
      {$this set category NORMAL}
      {foreach $char
         {switch $game.play_mode
            (h2h_drum BAND_H2H_DRUM_CHARS)
            (h2h_guitar BAND_H2H_GUITAR_CHARS)
            (h2h_vocals BAND_H2H_VOCALS_CHARS)
            {eval BAND_COOP_CHARS}
         }
         {if {exists $char}
            {$this add_target {object $char}}
         }
      }
   )
   (milo_name
      {do
         ($dir {$this dir})
         {if_else {== variant {$dir get_type}}
            {sprint
               {switch $game.play_mode
                  (h2h_drum h2hd_)
                  (h2h_guitar h2hg_)
                  (h2h_vocals h2hv_)
                  coop_
               }
               {$dir name}
               ".shot"
            }
            ""
         }
      }
   )
   (ext shot)
   (editor
      (targets
         (array
            (struct
               (target
                  object
                  (class Trans)
                  (refresh targets)
               )
               (anim
                  string
                  (list
                     {do
                        ($drv {find_obj [targets {elem $milo_prop_path 1} target] main.drv})
                        {object_list
                           {if_else $drv
                              {$drv get clips_ptr}
                              ''
                           }
                           CharClipGroup
                        }
                     }
                  )
                  (help "Name of CharClipGroup to play on character")
               )
               (teleport bool (help "do we teleport this character?"))
               (to TRANSFORM (help "the transform to teleport the character to"))
               (teleport_hold bool (help "keep the target teleported every frame"))
               (return bool (help "return to original position after shot?"))
               (self_shadow bool (help "should character cast a self shadow"))
               (spot_cutout bool (help "should character create spotlight cutouts"))
               (floor_shadow bool (help "should character cast a shadow on floor"))
               (freeze bool (help "use freeze frame?"))
               (freeze_delay float (help "delay time until freeze, in camera units"))
               (fast_forward
                  float
                  (help "Fast forward chosen animation by this time, in camera units")
               )
               (forward_event
                  symbol
                  (help "Event to fastforward relative to")
                  (list ('' freeze))
               )
               (target_ik
                  string
                  (list {object_list [targets {elem $milo_prop_path 1} target] Trans TRUE})
                  (help "Trans inside of target that you want to hit a Trans in the world")
               )
               (world_ik
                  object
                  (class Trans)
                  (help "Where you want target_ik to hit.")
               )
               (set_ik
                  script
                  (help "put world_ik where target_ik is, useful when composing the scene")
                  (script
                     {do
                        ($i {elem $milo_prop_path 1})
                        {$this adjust_ik
                           [targets $i world_ik]
                           [targets $i world_ik]
                           {find_obj [targets $i target] [targets $i target_ik]}
                        }
                     }
                  )
               )
               (world_prop
                  object
                  (class Trans)
                  (help "Object in the world to position at target_prop")
               )
               (target_prop
                  string
                  (list {object_list [targets {elem $milo_prop_path 1} target] Trans TRUE})
                  (help "Trans inside target that world_prop should hit")
               )
               (env_override
                  object
                  (class Environ)
                  (help "environment override for this target during this shot")
               )
               (lod_override bool (help "Force target to least-detailed LOD"))
               (outfit_hides
                  bitfield
                  (list
                     {if_else {$this has (outfit_list)}
                        {$this outfit_list}
                        ()
                     }
                  )
                  (help "Hide specified character outfits")
               )
            )
         )
      )
      (triggers
         (array
            (struct
               (frame float (help "Frame number for this trigger to go off"))
               (trigger
                  object
                  (class EventTrigger)
                  (help "Event trigger")
               )
            )
            (alias "trigger")
         )
         (post_sync {milo update_open_editor $this})
      )
      (event_at_start
         object
         (class EventTrigger)
         (help "Event Trigger to fire when this camshot starts")
      )
      (event_at_end
         object
         (class EventTrigger)
         (help "Event Trigger to fire when this camshot ends")
      )
      (zero_time float (help "synchronization time for this camshot"))
      (min_time
         int
         (help
            "30fps reg: minimum time this shot can last, DCuts: time past zero time in which the shot can be interupted"
         )
      )
      (max_time int (help "30fps maximum duration for this shot, 0 is infinite"))
      (fps_override
         bool
         (help
            "Force world to render at 20Hz when 3 or more gem tracks are in play (Wii only)"
         )
      )
      (store script (script {$this store}))
      (view script (script {$this view}))
      (view_freeze
         script
         (script {$this view_freeze})
         (help "Start a view but freeze them all in place")
      )
      (stop
         script
         (script
            {if {exists milo}
               {milo set_anim_paused TRUE}
            }
            {$this stop}
         )
      )
   )
   (types
      (band
         (flag_list
            (
               (
                  "kBCSBDistNull"
                  "kBCSBDistNear"
                  "kBCSBDistFar"
                  "kBCSBDistCloseup"
                  "kBCSBDistBehind"
               )
               ("kBCSBFacingNull" "kBCSBFacingLeft" "kBCSBFacingRight")
               "kValidMale"
               "kValidFemale"
               "kValidBanger"
               "kValidDramatic"
               "kValidRocker"
               "kValidSpazz"
            )
         )
         (outfit_list
            (
               "kOutfitHideEyes"
               "kOutfitHideMouth"
               "kOutfitHideFaceHair"
               "kOutfitHideBrow"
               "kOutfitHideHead"
               "kOutfitHideTorso"
               "kOutfitHideLegs"
               "kOutfitHideHats"
               "kOutfitHideHair"
               "kOutfitHideWrist"
               "kOutfitHideGlasses"
               "kOutfitHideBass"
               "kOutfitHideDrum"
               "kOutfitHideGuitar"
               "kOutfitHideMic"
            )
         )
         (worst FALSE)
         (editor
            (bass_focus bool (help "Is the bass player a major focus of this shot?"))
            (drums_focus bool (help "Is the drumer a major focus of this shot?"))
            (guitar_focus
               bool
               (help "Is the guitar player a major focus of this shot?")
            )
            (vocal_focus bool (help "Is the vocalist a major focus of this shot?"))
            (drums2_focus bool (help "Is the drumer a major focus of this shot?"))
            (guitar2_focus
               bool
               (help "Is the guitar player a major focus of this shot?")
            )
            (vocal2_focus bool (help "Is the vocalist a major focus of this shot?"))
            (postprocess
               object
               (class PostProc)
               (help "Post process object to use for this shot")
            )
            (next_shot
               object
               (class BandCamShot)
               (help "Force this shot to play after this one")
            )
            (crowd_density
               float
               (range 0 1)
               (help "density of crowd")
            )
            (crowd_lod
               int
               (range 0 2)
               (help "LOD of crowd texture (0 =  256x512) (1 = 128x256) (2 = 64x128)")
            )
            (crowd_face_camera bool (help "Whether the crowd should face the camera"))
            (crowd_anim
               symbol
               (list
                  (''
                     bad
                     great
                     idle
                     ok
                     carry_surfer
                     crowd_reaching
                     crowdlove
                     headbang
                     realtime_idle
                     intro_specific
                  )
               )
               (help "Crowd animation to play, overrides normal excitement level")
            )
            (one_time bool (help "only play this camera once per song"))
            (lighting_override
               bool
               (help
                  "override lighting on this shot? (only use for special shots like win, loose, etc)"
               )
            )
            (lighting_preset
               object
               (class LightPreset)
               (help
                  "light preset to fire for this camera only, only use in special cases, lighting override must be on, goes back to normal lighting when the shot is done!"
               )
            )
            (lighting_category
               symbol
               (list LIGHTING_CATEGORIES)
               (help
                  "Permanently change the lighting category, lighting override must be on with no preset selected."
               )
            )
            (worst
               bool
               (help "When using -worst_only with venuetest, only looks at these shots")
            )
            (play_anim
               object
               (class Anim)
               (help "animation to play with camshot")
            )
            (play_shot
               script
               (help "play this shot (useful for testing next shots)")
               (script {$world force_shot $this})
            )
            (stop_shot
               script
               (help "stop the current shot from playing")
               (script {$world force_shot ''})
            )
         )
         (postprocess {object ""})
         (bass_focus FALSE)
         (drums_focus FALSE)
         (guitar_focus FALSE)
         (vocal_focus FALSE)
         (drums2_focus FALSE)
         (guitar2_focus FALSE)
         (vocal2_focus FALSE)
         (crowd_density 1)
         (crowd_lod 0)
         (crowd_face_camera FALSE)
         (crowd_anim '')
         (one_time FALSE)
         (lighting_preset '')
         (lighting_override FALSE)
         (lighting_category INTRO)
         (play_anim '')
         (shot_over
            {if {!= {$world get_type} ''}
               {if_else [next_shot]
                  {if
                     {'||'
                        {! {exists milo}}
                        {&& {== kDataInt {type {milo get_anim}}} {== 0 {milo get_anim}}}
                        {!= $this {milo get_anim}}
                     }
                     {$world force_shot [next_shot]}
                  }
                  {if {'||' {! {ui focus_panel}} {!= cutscene {{ui focus_panel} name}}}
                     {handle ($world camshot_end)}
                  }
               }
            }
         )
         #define RB2_TO_LRB_CLIPGRPS (
            change_group
            {switch $grp
               (("walk_back" "walk_fwd" "walk_sideways") "_Walk.clipgrp")
               (("tambourine" "cowbell" "clap") "_Solo.clipgrp")
               ("closeup" "_Closeup.clipgrp")
               ("extreme_closeup" "_Extreme_Closeup.clipgrp")
               ("sit" "_Sit.clipgrp")
               ("stand" "_Stand.clipgrp")
               
               (("lose" "lose_sit") "_Lose.clipgrp")
               (("realtime_idle" "realtime_idle_sit") "_Idle.clipgrp")
               (("win" "win_sit") "_Win.clipgrp")
               {do
                  {print $grp " is an unhandled clip group!\n"}
                  "_Closeup.clipgrp"
               }
            }
            FALSE
            FALSE
            $fwd
            $units
            $event
         )
         (play_group
            ($char $grp $fwd $units $event)
            ;{print $char " " $grp " " $fwd " " $units " " $event "\n"}
            ; hack
            {switch {$char name}
               (player_guitar0 {{find_obj $world player_guitar} RB2_TO_LRB_CLIPGRPS})
               (player_drum0 {{find_obj $world player_drum} RB2_TO_LRB_CLIPGRPS})
               (player_vocals0 {{find_obj $world player_vocal} RB2_TO_LRB_CLIPGRPS})
               (player_bass0 {{find_obj $world player_bass} RB2_TO_LRB_CLIPGRPS})
               {$char change_group $grp $edit_mode FALSE $fwd $units $event}
            }
         )
         (invalid_gender
            ($gender)
            {==
               0
               {&
                  [flags]
                  {if_else {== $gender male}
                     kValidMale
                     kValidFemale
                  }
               }
            }
         )
         (preferred_gender
            ($char)
            {if_else $venue_test
               {do
                  ($arr {find (VENUETEST_PREFABS) {symbol {$char name}}})
                  {if_else
                     {>
                        {elem {find {find $arr budget_cpu_male} cost} 1}
                        {elem {find {find $arr budget_cpu_female} cost} 1}
                     }
                     male
                     female
                  }
               }
               {if_else $edit_mode
                  {$char get gender}
                  {if_else {gamemode get is_framerate_test}
                     $framerate_gender
                     {$char get gender}
                  }
               }
            }
         )
         (teleport_char
            ($char)
            {$char reset_hair}
         )
         (update_overlay
            #ifndef _SHIP
               #ifndef WII_OUTPUTONLY
               ;{print {$this name} "\n"}
               {rnd reflect
                  camera
                  {print "BandCamShot:" {$this name} " category:" [category] "\n"}
                  {print
                     " distance:"
                     {dist_string [flags]}
                     " facing:"
                     {facing_string [flags]}
                     "\n"
                  }
                  {print
                     "bass_focus:"
                     [bass_focus]
                     " drums_focus:"
                     [drums_focus]
                     " guitar_focus:"
                     [guitar_focus]
                     " vocal_focus:"
                     [vocal_focus]
                     "\n"
                  }
                  {print
                     " drums2_focus:"
                     [drums2_focus]
                     " guitar2_focus:"
                     [guitar2_focus]
                     " vocal2_focus:"
                     [vocal2_focus]
                     "\n"
                  }
                  {print
                     "min_time:"
                     [min_time]
                     " max_time:"
                     [max_time]
                     {if_else $camera.postproc_override
                        {sprint " postproc override: " $camera.postproc_override}
                        {sprint " postprocess: " [postprocess]}
                     }
                     "\n"
                  }
               }
               #endif
            #endif
         )
         (start_shot
            #ifndef _SHIP
               #ifndef WII_OUTPUTONLY
               {$this update_overlay}
               #endif
            #endif
            ; hack
            {with $world
               {if {exists player_guitar0}
                  {do ($x) ($y) ($z)
                     {player_guitar0 get_local_pos $x $y $z}
                     {player_guitar set_local_pos $x $y $z}

                     {player_bass0 get_local_pos $x $y $z}
                     {player_bass set_local_pos $x $y $z}

                     {player_drum0 get_local_pos $x $y $z}
                     {player_drum set_local_pos $x $y $z}

                     {player_vocals0 get_local_pos $x $y $z}
                     {player_vocal set_local_pos $x $y $z}
                  }
               }
            }
            {if [play_anim]
               {[play_anim] animate}
            }
            {if {&& {exists game} {!= {$world get_type} ''}}
               {if_else
                  {&&
                     $world
                     {== {$world get excitement_level} excitement_bad}
                     {$world find failing.pp}
                  }
                  {{$world find failing.pp} select}
                  {if_else [postprocess]
                     {do
                        {[postprocess] select}
                        {set $camera.postproc_cache {[postprocess] name}}
                     }
                     {do
                        ($pp
                           {if_else {&& $camera.postproc_override {$world exists $camera.postproc_override}}
                              {$world find $camera.postproc_override}
                              {do
                                 {set $camera.postproc_blendtime 0}
                                 {$world find "ProFilm_a.pp"}
                              }
                           }
                        )
                        ($ob {$world find "override_blender.pp"})
                        {if_else {&& $pp $ob}
                           {do
                              {if {!= $camera.postproc_cache $pp}
                                 {pp_blend_task $ob $pp $camera.postproc_blendtime kTaskBeats 0}
                              }
                              {set $camera.postproc_cache {$pp name}}
                           }
                           {notify "postproc missing, " $pp "   " $ob "\n"}
                        }
                     }
                  }
               }
            }
            {if {&& [lighting_override] {! $camera.disable_picking}}
               {if_else [lighting_preset]
                  {$world force_preset [lighting_preset]}
                  {$world set_lighting [lighting_category] () FALSE}
               }
            }
            {if [one_time]
               {'|=' [flags] kBCSBOneTimePlayed}
            }
            {unless $camera.disable_picking
               {if
                  {find_elem
                     (LOSE WIN_PRE WIN WIN_P1 WIN_P2 WIN_TIE WIN_QUICK WIN_PRE_FINALE)
                     [category]
                  }
                  {handle ($world playing_final_cam)}
               }
               {if {== [category] WIN_PRE_FINALE}
                  {set $camera.disable_picking TRUE}
               }
            }
            {if {&& {exists game} {== {$this name} "coop_final_win13.shot"}}
               {game disable_all_controllers}
            }
            {if {&& {! {startswith {game get_venue} "rb2/"}} [crowd]} ; fixes a crash
               {[crowd] override_anim [crowd_anim]}
               {[crowd] crowd_update}
               {[crowd] set rotate [crowd_face_camera]}
               {[crowd] set_fullness [crowd_density] [crowd_density]}
               {[crowd] set lod [crowd_lod]}
            }
         )
         (stop_shot
            {if $world
               {if [crowd]
                  {[crowd] override_anim ''}
               }
               {if {&& [lighting_override] [lighting_preset]}
                  {$world force_preset ''}
               }
            }
         )
         (test_targets
            {do
               ($bass FALSE)
               ($drum FALSE)
               ($guitar FALSE)
               ($vocal FALSE)
               ($continue TRUE)
               {$this iterate_refs $ref {set $continue FALSE}}
               {if {&& $continue {has_substr {$cam name} "coop_"} {!= [category] INTRO}}
                  {foreach_int $i 0 {$this size (targets)}
                     {do
                        ($targ [targets $i target])
                        ($tanim [targets $i anim])
                        {if_else $targ
                           {do
                              ($tname {$targ name})
                              {if {has_substr $tname "player_bass0"}
                                 {set $bass TRUE}
                                 {unless $tanim
                                    {notify {path_name $cam} " missing bass animation"}
                                 }
                              }
                              {if {has_substr $tname "player_drum0"}
                                 {set $drum TRUE}
                                 {unless $tanim
                                    {notify {path_name $cam} " missing drum animation"}
                                 }
                              }
                              {if {has_substr $tname "player_guitar0"}
                                 {set $guitar TRUE}
                                 {unless $tanim
                                    {notify {path_name $cam} " missing guitar animation"}
                                 }
                              }
                              {if {has_substr $tname "player_vocals0"}
                                 {set $vocal TRUE}
                                 {unless $tanim
                                    {notify {path_name $cam} " missing vocal animation"}
                                 }
                              }
                           }
                           {notify {path_name $cam} " target " $i " is NULL"}
                        }
                     }
                  }
                  {unless {&& $bass $drum $guitar $vocal}
                     {notify "camera " {path_name $cam} " missing all 4 required targets!"}
                  }
               }
               {if {&& $continue {has_substr {$cam name} "h2hd_"} {!= [category] INTRO}}
                  {foreach_int $i 0 {$this size (targets)}
                     {do
                        ($targ [targets $i target])
                        ($tanim [targets $i anim])
                        {if_else $targ
                           {do
                              ($tname {$targ name})
                              {if {has_substr $tname "player_drum0"}
                                 {set $bass TRUE}
                                 {unless $tanim
                                    {notify "missing drum animation on " {path_name $cam} " camera"}
                                 }
                              }
                              {if {has_substr $tname "player_drum1"}
                                 {set $drum TRUE}
                                 {unless $tanim
                                    {notify "missing drum1 animation on " {path_name $cam} " camera"}
                                 }
                              }
                              {if {has_substr $tname "player_guitar0"}
                                 {set $guitar TRUE}
                                 {unless $tanim
                                    {notify "missing guitar animation on " {path_name $cam} " camera"}
                                 }
                              }
                              {if {has_substr $tname "player_vocals0"}
                                 {set $vocal TRUE}
                                 {unless $tanim
                                    {notify "missing vocal animation on " {path_name $cam} " camera"}
                                 }
                              }
                           }
                           {notify $cam " has empty target"}
                        }
                     }
                  }
                  {unless {&& $bass $drum $guitar $vocal}
                     {notify "camera " $cam " missing all 4 required targets!"}
                  }
               }
               {if {&& $continue {has_substr {$cam name} "h2hg_"} {!= [category] INTRO}}
                  {foreach_int $i 0 {$this size (targets)}
                     {do
                        ($targ [targets $i target])
                        ($tanim [targets $i anim])
                        {if_else $targ
                           {do
                              ($tname {$targ name})
                              {if {has_substr $tname "player_drum0"}
                                 {set $bass TRUE}
                                 {unless $tanim
                                    {notify "missing drum animation on " {path_name $cam} " camera"}
                                 }
                              }
                              {if {has_substr $tname "player_guitar0"}
                                 {set $drum TRUE}
                                 {unless $tanim
                                    {notify "missing guitar0 animation on " {path_name $cam} " camera"}
                                 }
                              }
                              {if {has_substr $tname "player_guitar1"}
                                 {set $guitar TRUE}
                                 {unless $tanim
                                    {notify "missing guitar1 animation on " {path_name $cam} " camera"}
                                 }
                              }
                              {if {has_substr $tname "player_vocals0"}
                                 {set $vocal TRUE}
                                 {unless $tanim
                                    {notify "missing vocal animation on " {path_name $cam} " camera"}
                                 }
                              }
                           }
                           {notify $cam " has empty target"}
                        }
                     }
                  }
                  {unless {&& $bass $drum $guitar $vocal}
                     {notify "camera " $cam " missing all 4 required targets!"}
                  }
               }
               {if {&& $continue {has_substr {$cam name} "h2hv_"} {!= [category] INTRO}}
                  {foreach_int $i 0 {$this size (targets)}
                     {do
                        ($targ [targets $i target])
                        ($tanim [targets $i anim])
                        {if_else $targ
                           {do
                              ($tname {$targ name})
                              {if {has_substr $tname "player_drum0"}
                                 {set $bass TRUE}
                                 {unless $tanim
                                    {notify "missing drum animation on " {path_name $cam} " camera"}
                                 }
                              }
                              {if {has_substr $tname "player_guitar0"}
                                 {set $guitar TRUE}
                                 {unless $tanim
                                    {notify "missing guitar animation on " {path_name $cam} " camera"}
                                 }
                              }
                              {if {has_substr $tname "player_vocals0"}
                                 {set $drum TRUE}
                                 {unless $tanim
                                    {notify "missing drum animation on " {path_name $cam} " camera"}
                                 }
                              }
                              {if {has_substr $tname "player_vocals1"}
                                 {set $vocal TRUE}
                                 {unless $tanim
                                    {notify "missing vocal1 animation on " {path_name $cam} " camera"}
                                 }
                              }
                           }
                           {notify $cam " has empty target"}
                        }
                     }
                  }
                  {unless {&& $bass $drum $guitar $vocal}
                     {notify "camera " $cam " missing all 4 required targets!"}
                  }
               }
            }
         )
         (shot_ok
            ($prev_shot)
            {if_else {has_substr {$this name} "_dir"}
               TRUE
               {if_else $shot_ok.bie
                  {$this test_delta $shot_ok.delta_30fps}
                  {if_else $cameras.validating
                     {has_substr {$this name} $cameras.namefilter}
                     TRUE
                  }
               }
            }
         )
      )
      (shell
         (abs_regulate TRUE)
         (editor
            (abs_regulate
               bool
               (help
                  "If true regulates the character so they can't move too far from their start"
               )
            )
         )
         (play_group
            ($char $grp $fwd $units $event)
            ; useless!!!
            {$char change_group $grp $edit_mode FALSE $fwd $units $event}
         )
         (teleport_char
            ($char)
            {$char sync_waypoint}
            {handle ($char set_abs_regulate [abs_regulate])}
         )
         (start_shot
            #ifndef _SHIP
               #ifndef WII_OUTPUTONLY
               {rnd reflect
                  camera
                  {print "BandCamShot:" {$this name} " category:" [category] "\n"}
               }
               #endif
            #endif
         )
         (stop_shot
            {foreach_int $i 0 {$this size (targets)}
               {do
                  ($char [targets $i target])
                  {if $char
                     {handle ($char set_abs_regulate TRUE)}
                  }
               }
            }
         )
      )
      (snapshot
         (target0_face '')
         (target1_face '')
         (target2_face '')
         (target3_face '')
         (target0_face_frame 0)
         (target1_face_frame 0)
         (target2_face_frame 0)
         (target3_face_frame 0)
         (postprocess {object ""})
         (editor
            (target0_face
               string
               (help "name of the target 0 facial animation clip to show")
               (list {$this get_faces 0})
               (post_sync {$this view})
            )
            (target1_face
               string
               (help "name of the target 1 facial animation clip to show")
               (list {$this get_faces 1})
               (post_sync {$this view})
            )
            (target2_face
               string
               (help "name of the target 2 facial animation clip to show")
               (list {$this get_faces 2})
               (post_sync {$this view})
            )
            (target3_face
               string
               (help "name of the target 3 facial animation clip to show")
               (list {$this get_faces 3})
               (post_sync {$this view})
            )
            (target0_face_frame
               float
               (help "frames into target 0 face clip to go")
               (post_sync {$this view})
            )
            (target1_face_frame
               float
               (help "frames into target 1 face clip to go")
               (post_sync {$this view})
            )
            (target2_face_frame
               float
               (help "frames into target 2 face clip to go")
               (post_sync {$this view})
            )
            (target3_face_frame
               float
               (help "frames into target 3 face clip to go")
               (post_sync {$this view})
            )
            (postprocess
               object
               (class PostProc)
               (help "Post process object to use for this shot")
            )
         )
         (play_group
            ($char $grp $fwd $units $event)
            ; useless!!!
            {$char iterate CharDriver $d {$d enter}}
            {$char change_group $grp $edit_mode FALSE $fwd $units $event}
         )
         (start_shot
            {$this set_face_anim 0 [target0_face] [target0_face_frame]}
            {$this set_face_anim 1 [target1_face] [target1_face_frame]}
            {$this set_face_anim 2 [target2_face] [target2_face_frame]}
            {$this set_face_anim 3 [target3_face] [target3_face_frame]}
            {if [postprocess]
               {[postprocess] select}
            }
            {taskmgr set_seconds 0.0 TRUE}
            {foreach_int $i 0 {$this size (targets)}
               {do
                  ($char [targets $i target])
                  {if $char
                     {$char set force_vertical FALSE}
                     {with {$char find bone.servo}
                        {set [move_self] FALSE}
                        {set [delta_changed] FALSE}
                     }
                     {{$char find right_eye.lookat} enter}
                     {{$char find left_eye.lookat} enter}
                     {$char set frozen FALSE}
                     {$char poll}
                     {$this adjust_ik
                        [targets $i target]
                        {find_obj [targets $i target] [targets $i target_ik]}
                        [targets $i world_ik]
                     }
                     {$char iterate CharHair $hair {$hair reset 15}}
                     {$char poll}
                     {$this adjust_ik
                        [targets $i world_prop]
                        [targets $i world_prop]
                        {find_obj [targets $i target] [targets $i target_prop]}
                     }
                     {$char set frozen TRUE}
                     {with {$char find bone.servo}
                        {set [move_self] TRUE}
                        {set [delta_changed] FALSE}
                     }
                     {$char set force_vertical TRUE}
                  }
               }
            }
         )
         (set_face_anim
            ($i $clip $frame)
            {if {&& $clip {< $i {$this size (targets)}}}
               {do
                  ($dude [targets $i target])
                  {if $dude
                     {do
                        ($drv {find_obj $dude expression.drv})
                        {if $drv
                           {if_else {{$drv get_clips} exists $clip}
                              {do
                                 {$drv play $clip kPlayNoBlend}
                                 {$drv offset $frame}
                              }
                              {notify "Could not find clip " $clip " in " {path_name {$drv get_clips}}}
                           }
                        }
                     }
                  }
               }
            }
         )
         (get_faces
            ($i)
            {do
               ($list {array 0})
               {push_back $list ''}
               {if {< $i {$this size (targets)}}
                  {do
                     ($target [targets $i target])
                     {if {&& $target {$target is_a Character} {$target exists expression.drv}}
                        {do
                           ($clips {{$target find expression.drv} get clips_ptr})
                           {$clips iterate_self CharClip $clip {push_back $list {$clip name}}}
                        }
                        {sort $list}
                     }
                  }
               }
               $list
            }
         )
      )
   )
   (views
      (flags
         ("Category" [category])
         ("Platform Only" [platform_only])
         ("DoF" [use_depth_of_field])
         ("Target 0" [keyframes 0 targets 0 entity])
         ("Target 1" [keyframes 1 targets 0 entity])
         ("Total Duration" {$this duration_seconds})
         ("Blur Depth" [keyframes 0 blur_depth])
         ("Max Blur" [keyframes 0 max_blur])
         ("Focus Blur Mult" [keyframes 0 focus_blur_multiplier])
         ("Shake Freq" [keyframes 0 shake_noisefreq])
         ("Shake Amp" [keyframes 0 shake_noiseamp])
         ("Shake Max x" [keyframes 0 shake_maxangle x])
         ("Shake Max y" [keyframes 0 shake_maxangle y])
         ("PS3 Per Pixel" [ps3_per_pixel])
      )
      (Shadows
         ("Category" [category])
         ("Bass Shadow" [targets 0 self_shadow])
         ("Bass Cutout" [targets 0 spot_cutout])
         ("Bass Floorspot" [targets 0 floor_shadow])
         ("Drum Shadow" [targets 1 self_shadow])
         ("Drum Cutout" [targets 1 spot_cutout])
         ("Drum Floorspot" [targets 1 floor_shadow])
         ("Guitar Shadow" [targets 2 self_shadow])
         ("Guitar Cutout" [targets 2 spot_cutout])
         ("Guitar Floorspot" [targets 2 floor_shadow])
         ("Vocal Shadow" [targets 3 self_shadow])
         ("Vocal Cutout" [targets 3 spot_cutout])
         ("Vocal Floorspot" [targets 3 floor_shadow])
      )
      (CrowdDensity
         ("Crowd density" [crowd_density])
         ("Crowd lod" [crowd_lod])
      )
   )
)
#define PLAYER_SETTINGS (("kPlayer1" "kPlayer2" "kPlayerNone" "kPlayerShared"))
(BandCrowdMeterDir
   (description "Crowd meter hud element, has a needle")
   (superclasses RndDir)
   (types)
   (editor
      (guitar_slot_anim
         object
         (class Group)
         (help "Guitar group")
         HIDE_IN_PROXY
      )
      (bass_slot_anim
         object
         (class Group)
         (help "Bass group")
         HIDE_IN_PROXY
      )
      (drum_slot_anim
         object
         (class Group)
         (help "Drum group")
         HIDE_IN_PROXY
      )
      (vocals_slot_anim
         object
         (class Group)
         (help "Vocals group")
         HIDE_IN_PROXY
      )
      (peak_value float (help "Peak state value"))
      (value
         float
         (range 0 1)
         (post_sync {$this set_crowd [value]})
         (help "Band health. Animates crowd_meter.grp")
         (no_test)
      )
      (guitar
         float
         (range -1 1)
         (post_sync {$this set_val guitar [guitar]})
         (help "Guitar health. Animates guitar.tnm")
      )
      (drum
         float
         (range -1 1)
         (post_sync {$this set_val drum [drum]})
         (help "Drummer health. Animates drum.tnm")
      )
      (bass
         float
         (range -1 1)
         (post_sync {$this set_val bass [bass]})
         (help "Bass health. Animates bass.tnm")
      )
      (vocals
         float
         (range -1 1)
         (post_sync {$this set_val vocals [vocals]})
         (help "Vocal health. Animates vocals.tnm")
      )
      (reset script (script {$this reset}))
      (level_colors (array color))
      (maxed
         bool
         (post_sync {$this set_maxed [maxed]})
         (help "Turned on when in the 'meter maxed' state. Animates maxed.tnm")
         (no_test)
      )
      (worst_case script (script {$this worst_case}))
   )
)
(CrowdMeterIcon
   (description "Individual player icon for crowd meter")
   (superclasses RndDir)
   (types)
   (editor
      (reset script (script {$this reset}))
      (arrow_hide script (script {$this arrow_hide}))
      (arrow_show script (script {$this arrow_show}))
      (deploy script (script {$this deploy}))
      (stop_deploy script (script {$this stop_deploy}))
      (glow script (script {$this set_glowing 1}))
      (glow_stop script (script {$this set_glowing 0}))
      (state_normal script (script {$this set_state 0}))
      (state_warning script (script {$this set_state 1}))
      (state_failed script (script {$this set_state 2}))
   )
)
(BandStarMeterDir
   (description "Star meter hud element")
   (superclasses RndDir)
   (types)
   (editor
      (main_group
         object
         (class Group)
         (help "animated from 0 to 100 as the meter fills")
         HIDE_IN_PROXY
      )
      (ready_group
         object
         (class Group)
         (help "drawn and animated only when star power is ready")
         HIDE_IN_PROXY
      )
      (fill_group
         object
         (class Group)
         (help "drawn and animated only when star power is filling up")
         HIDE_IN_PROXY
      )
      (anim_group
         object
         (class Group)
         (help "always animated")
         HIDE_IN_PROXY
      )
      (engage_anim_1
         object
         (class Anim)
         (help "anim to drive when player 1 is trying to engage")
         HIDE_IN_PROXY
      )
      (engage_anim_2
         object
         (class Anim)
         (help "anim to drive when player 2 is trying to engage")
         HIDE_IN_PROXY
      )
      (value
         float
         (range 0 1)
         (help "test value between 0 and 1")
      )
      (using_star_power
         bool
         (help "for testing; whether we're using star power or not.")
         (no_test)
      )
      (engaging_1
         bool
         (help "whether player 1 is trying to engage, for testing.")
      )
      (engaging_2
         bool
         (help "whether player 2 is trying to engage, for testing.")
      )
      (player
         int
         (list PLAYER_SETTINGS)
         (help "which player to track")
      )
   )
)
(BandScoreDisplay
   (description "Score displaying hud element")
   (superclasses RndDir)
   (types)
   (editor
      (display_meshs
         (array object (class Mesh))
         (help "mesh for each displayed digit")
         HIDE_IN_PROXY
      )
      (digit_mats
         (array object (class Mat))
         (help "material for each digit (0-9)")
         HIDE_IN_PROXY
      )
      (blank_mat
         object
         (class Mat)
         (help "material for a blank space")
         HIDE_IN_PROXY
      )
      (score int (help "enter the score for testing"))
      (player
         int
         (list PLAYER_SETTINGS)
         (help "which player to track")
      )
   )
)
(BandStreakDisplay
   (description "Streak displaying hud element")
   (superclasses RndDir)
   (types)
   (editor
      (color_anim
         object
         (class MatAnim)
         (help "mat anim specifying the color for each state")
         HIDE_IN_PROXY
      )
      (shake_anim
         object
         (class Anim)
         (help "anim that is fired when achieving a new streak")
         HIDE_IN_PROXY
      )
      (frame_mat
         object
         (class Mat)
         (help "material for the frame (has color applied to it)")
         HIDE_IN_PROXY
      )
      (mult_glow_mesh
         object
         (class Mesh)
         (help
            "glow mesh; hidden when no streak, color of its material is changed to match the streak color"
         )
         HIDE_IN_PROXY
      )
      (mult_frame_mat
         object
         (class Mat)
         (help "material for multiplier frame")
         HIDE_IN_PROXY
      )
      (led_mats
         (array object (class Mat))
         (help "material for LED's; one material per color.")
         HIDE_IN_PROXY
      )
      (led_meshs
         (array object (class Mesh))
         (help "meshes for the LED streak indicators")
         HIDE_IN_PROXY
      )
      (digit_mats
         (array object (class Mat))
         (help "one material per digit")
         HIDE_IN_PROXY
      )
      (mult_digit_mesh
         object
         (class Mesh)
         (help "mesh for the multiplier digit")
         HIDE_IN_PROXY
      )
      (x_digit_mesh
         object
         (class Mesh)
         (help "mesh for the X")
         HIDE_IN_PROXY
      )
      (blank_digit_mat
         object
         (class Mat)
         (help "material for a blank digit")
         HIDE_IN_PROXY
      )
      (x_digit_mat
         object
         (class Mat)
         (help "material for the X")
         HIDE_IN_PROXY
      )
      (blown_mesh_1
         object
         (class Mesh)
         (help "mesh to indicate when player 1 blows a streak")
         HIDE_IN_PROXY
      )
      (blown_mesh_2
         object
         (class Mesh)
         (help "mesh to indicate when player 2 blows a streak")
         HIDE_IN_PROXY
      )
      (blown_mat
         object
         (class Mat)
         (help "material used for the indicators when the streak is blown")
         HIDE_IN_PROXY
      )
      (blown_display_time
         float
         (range 0 5)
         (no_test serialize)
         (help "length of time the blown streak indicator should light up for")
         HIDE_IN_PROXY
      )
      (player_1_blows script (script {$this blow_streak 0}))
      (player_2_blows script (script {$this blow_streak 1}))
      (multiplier
         int
         (range 1 9)
         (help "multiplier value for testing")
      )
      (star_mode bool (help "toggle star power for testing"))
      (partial_streak
         int
         (range 0 20)
         (help "partial streak for testing")
      )
      (player
         int
         (list PLAYER_SETTINGS)
         (help "which player to track")
      )
      (refresh script (script {$this refresh}))
   )
)
(BandLeadMeter
   (description
      "Multiplayer lead meter hud element, shows which player is in the lead"
   )
   (superclasses RndDir)
   (types)
   (editor
      (needle_anim
         object
         (class Anim)
         (help "anim to drive the needle")
         HIDE_IN_PROXY
      )
      (logo_glow_anim
         object
         (class Anim)
         (help "anim to make the logo glow different colors")
         HIDE_IN_PROXY
      )
      (glow_mesh_1
         object
         (class Mesh)
         (help "mesh that is shown when player 1 is ahead")
         HIDE_IN_PROXY
      )
      (glow_mesh_2
         object
         (class Mesh)
         (help "mesh that is shown when player 2 is ahead")
         HIDE_IN_PROXY
      )
      (pegged_anim_1
         object
         (class Anim)
         (help "animation to play when player 1 has a huge lead")
         HIDE_IN_PROXY
      )
      (pegged_anim_2
         object
         (class Anim)
         (help "animation to play when player 2 has a huge lead")
         HIDE_IN_PROXY
      )
      (lens_mesh
         object
         (class Mesh)
         (help "lens mesh")
         HIDE_IN_PROXY
      )
      (lens_mat_neutral
         object
         (class Mat)
         (help "lens mat to use when the score is tied")
         HIDE_IN_PROXY
      )
      (lens_mat_1
         object
         (class Mat)
         (help "lens mat to use when player 1 is winning")
         HIDE_IN_PROXY
      )
      (lens_mat_2
         object
         (class Mat)
         (help "lens mat to use when player 2 is winning")
         HIDE_IN_PROXY
      )
      (score_diff
         int
         (help
            "difference in scores for testing. a positive number means the first player is ahead."
         )
      )
      (refresh script (script {$this refresh}))
   )
)
(BandMeshLauncher
   (description "A MeshLauncher object emits meshes along a path.")
   (superclasses Poll)
   (ext ml)
   (types
      (basic_launcher
         (editor
            (launch_mesh script (script {$this launch_mesh}))
            (trans_anim object (class TransAnim))
            (parent_trans object (class Trans))
         )
         (trans_anim "")
         (parent_trans "")
         (launch_mesh
            {if {!= [trans_anim] ""}
               {$this launch [trans_anim] [parent_trans]}
            }
         )
      )
      (particle_launcher
         (editor
            (launch script (script {$this launch_particles}))
            (part object (class ParticleSys))
            (trans object (class Trans))
            (num_parts int (range 0 1000))
            (use_life
               bool
               (refresh life)
               (post_sync
                  {if {! [use_life]}
                     {set [life] 0}
                  }
               )
            )
            (life float (read_only {! [use_life]}))
            (use_speed
               bool
               (refresh speed)
               (post_sync
                  {if {! [use_speed]}
                     {set [speed] 0}
                  }
               )
            )
            (speed float (read_only {! [use_speed]}))
            (use_size
               bool
               (refresh size)
               (post_sync
                  {if {! [use_size]}
                     {set [size] 0}
                  }
               )
            )
            (size float (read_only {! [use_size]}))
            (use_delta_size
               bool
               (refresh delta_size)
               (post_sync
                  {if {! [use_delta_size]}
                     {set [delta_size] 0}
                  }
               )
            )
            (delta_size float (read_only {! [use_delta_size]}))
            (use_start_color
               bool
               (refresh start_color start_alpha)
               (post_sync
                  {if {! [use_start_color]}
                     {set [start_color] 0}
                     {set [start_alpha] 0}
                  }
               )
            )
            (start_color color (read_only {! [use_start_color]}))
            (start_alpha
               float
               (read_only {! [use_start_color]})
               (range 0 1)
            )
            (use_mid_color
               bool
               (refresh mid_color mid_alpha)
               (post_sync
                  {if {! [use_mid_color]}
                     {set [mid_color] 0}
                     {set [mid_alpha] 0}
                  }
               )
            )
            (mid_color color (read_only {! [use_mid_color]}))
            (mid_alpha
               float
               (read_only {! [use_mid_color]})
               (range 0 1)
            )
            (use_end_color
               bool
               (refresh end_color end_alpha)
               (post_sync
                  {if {! [use_end_color]}
                     {set [end_color] 0}
                     {set [end_alpha] 0}
                  }
               )
            )
            (end_color color (read_only {! [use_end_color]}))
            (end_alpha
               float
               (read_only {! [use_end_color]})
               (range 0 1)
            )
            (use_emit_direction
               bool
               (refresh pitch_low pitch_high yaw_low yaw_high)
               (post_sync
                  {if {! [use_end_color]}
                     {set [pitch_low] 0}
                     {set [pitch_high] 0}
                     {set [yaw_low] 0}
                     {set [yaw_high] 0}
                  }
               )
            )
            (pitch_low float (read_only {! [use_emit_direction]}))
            (pitch_high float (read_only {! [use_emit_direction]}))
            (yaw_low float (read_only {! [use_emit_direction]}))
            (yaw_high float (read_only {! [use_emit_direction]}))
         )
      )
   )
   (editor
      (multi_mesh
         object
         (class MultiMesh)
         (help "Controlled MultiMesh to emit from.")
      )
   )
)
#define kNoAttitude (0)
(CompositeCharacter
   (description "Character with outfits and compositing decal texture tech")
   (superclasses Character)
   (editor
      (height
         float
         (help "Deformation height 0-1")
         (range 0 1)
      )
      (weight
         float
         (help "Deformation weight 0-1")
         (range 0 1)
      )
      (skin_color_index
         int
         (help "Skin color index")
         (no_test)
      )
      (skin_color_palette
         object
         (class ColorPalette)
         (help "Skin color palette")
      )
      (skin_tattoo_palette
         object
         (class ColorPalette)
         (help "Color palette to apply to tattoo's")
      )
      (eye_color_index int (help "Eye color index"))
      (eye_color_palette
         object
         (class ColorPalette)
         (help "Eye color palette")
      )
      (eyebrow_color_index int (help "Eyebrow color index, uses hair.pal"))
      (skin_shader
         object
         (class Tex)
         (help "Always use this skin shader for this character")
      )
      (attitude
         int
         (help "Character attitude")
         (list ("kGenreBanger" "kGenreDramatic" "kGenreRocker" "kGenreSpazz"))
      )
      (tempo
         int
         (help "Character tempo")
         (list ("kTempoSlow" "kTempoMedium" "kTempoFast"))
      )
      (challenge
         int
         (help "Challenge type")
         (list
            (
               "kChallengeNone"
               "kChallengeAsteroid"
               "kChallengeCastle"
               "kChallengeDemolition"
               "kChallengeDinoChase"
               "kChallengeFarmRain"
               "kChallengeGhostbusters"
               "kChallengeIceBreaker"
               "kChallengeOctopus"
               "kChallengeOvalRace"
               "kChallengeRoofTop"
               "kChallengeUfo"
               "kChallengeZooEscape"
            )
         )
      )
      (clip_mode
         int
         (help "Which clips it will load")
         (list
            (
               "kClipModeNone"
               "kClipModeMeta"
               "kClipModeLoadingScreen"
               "kClipModeRealtime"
               "kClipModeWorld"
               "kClipModeFinale"
            )
         )
      )
      (gender
         symbol
         (help "gender")
         (list (male female))
      )
      (frozen bool (help "if true, is frozen in place"))
      (force_poll
         bool
         (help
            "if true, forces the character to poll even if hidden, used for video venue"
         )
         (no_test)
      )
      (load_clips
         script
         (help "loads clips according to clips_mode, attitude, and tempo")
         (script
            {$this load_clips FALSE}
            {$this sync_bones}
         )
      )
      (randomize_colors
         script
         (script {$this iterate OutfitConfig $o {$o randomize_colors}})
      )
      (write_character
         script
         (script {$this write_character})
         (help "Writes out character definition to band\\run\\character_config.dta")
      )
      (clear_ram
         script
         (script {$this clear_ram})
         (help "Clears out all unneeded stuff, made for Pi as example.")
      )
   )
)
(LayerDir
   (description "Draws configurable layer planes from an orthographic camera")
   (types)
   (superclasses RndDir)
   (editor
      (layers
         (array
            (struct
               (name
                  string
                  (hide {$this is_proxy})
                  (refresh layers)
               )
               (active
                  bool
                  (help "is this layer active?")
                  (hide {! [layers {elem $milo_prop_path 1} layer_optional]})
               )
               (color
                  color
                  (help
                     {if_else {$this is_proxy}
                        "layers preview color value to apply (not saved)"
                        "layers default color value to apply (saved)"
                     }
                  )
                  (hide {! [layers {elem $milo_prop_path 1} allow_color]})
               )
               (color_idx
                  int
                  (help
                     {if_else {$this is_proxy}
                        "layers preview color value to apply from palette (not saved)"
                        "layers default color value to apply from palette (saved)"
                     }
                  )
                  (hide
                     {'||'
                        {! [layers {elem $milo_prop_path 1} allow_color]}
                        {! [layers {elem $milo_prop_path 1} color_palette]}
                     }
                  )
               )
               (alpha
                  float
                  (help
                     {if_else {$this is_proxy}
                        "layers preview alpha value to apply (not saved)"
                        "layers default alpha value to apply (saved)"
                     }
                  )
                  (range 0 1)
                  (hide {! [layers {elem $milo_prop_path 1} allow_alpha]})
               )
               (bitmap
                  string
                  (list {$this get_bitmap_list})
                  (help
                     {if_else {$this is_proxy}
                        "preview bitmap to apply (not saved)"
                        "default bitmap to apply (saved)"
                     }
                  )
                  (hide {< {size [layers {elem $milo_prop_path 1} bitmap_list]} 2})
               )
               (setup
                  (indent
                     (mat
                        object
                        (class Mat)
                        (help "Material this layer controls")
                     )
                     (proxy
                        object
                        (class RndDir)
                        (help "set the proxy file to use if this is a user-created patch layer")
                     )
                     (layer_optional
                        bool
                        (help "can this layer can be turned off?")
                        (refresh layers)
                     )
                     (bitmap_list
                        (array file)
                        (help "list of available bitmaps")
                        (refresh layers)
                     )
                     (allow_color
                        bool
                        (help "allow users to change color")
                        (refresh layers)
                     )
                     (color_palette
                        object
                        (class Object color_palette)
                        (help "select a palette object to get colors from")
                        (hide
                           {'||' {! [layers {elem $milo_prop_path 1} allow_color]} {$this is_proxy}}
                        )
                     )
                     (allow_alpha
                        bool
                        (help "allow users to change alpha as slider")
                        (refresh layers)
                     )
                     (alpha_min
                        float
                        (read_only {! [layers {elem $milo_prop_path 1} allow_alpha]})
                        (refresh layers)
                        (help "minimum alpha value allowed")
                     )
                     (alpha_max
                        float
                        (read_only {! [layers {elem $milo_prop_path 1} allow_alpha]})
                        (refresh layers)
                        (help "maximum alpha value allowed")
                     )
                  )
                  (hide {$this is_proxy})
               )
            )
            (header [layers {elem $milo_prop_path 1} name])
         )
      )
      (randomize_colors script (script {$this randomize_colors}))
      (use_free_cam
         bool
         (help
            "allows dir to have it's own camera instead of using the preset fixed camera"
         )
         (hide {$this is_proxy})
      )
   )
)
(ColorPalette
   (description "List of primary/secondary colors for OutfitConfig")
   (allowed_dirs RndDir)
   (types)
   (ext pal)
   (editor (colors (array color (help "Color for materials"))))
)
(OutfitConfig
   (description "Configurable options for outfits")
   (superclasses Poll)
   (allowed_dirs RndDir)
   (types)
   (ext cfg)
   (editor
      (colors
         (array
            (struct
               (color_index int (help "Index of color choice"))
               (mats
                  (array
                     (struct
                        (mat
                           object
                           (class Mat)
                           (help "Material with configurable colors/texture")
                        )
                        (primary_palette
                           object
                           (class ColorPalette)
                           (help "Colors for material color, shown to the user if set")
                        )
                        (secondary_palette
                           object
                           (class ColorPalette)
                           (help
                              "Colors for material two_color, not shown to user unless primary_palette isn't set"
                           )
                        )
                        (textures
                           (array object (class Tex))
                           (help
                              "Textures to use instead of colors, must be same size as primary color palette!"
                           )
                        )
                     )
                  )
                  (help
                     "Color palette of first item in this list defines user's options in game"
                  )
               )
            )
         )
         (help "All color/texture choices for this outfit in game")
      )
      (randomize_colors
         script
         (script {$this randomize_colors})
         (help "Set random color indices")
         (refresh colors)
      )
      (apply
         script
         (script {$this apply})
         (help "Apply color choices to the outfit")
      )
   )
)
(PatchRenderer
   (description "Special texture renderer for character patches")
   (allowed_dirs)
   (superclasses TexRenderer)
   (types)
   (ext patch)
   (editor
      (test_mode
         symbol
         (list (blank test))
         (help "Blank/test modes for milo")
      )
      (position
         symbol
         (list (front back left right))
         (help "Position of patch, controls which cam shot we use")
      )
      (back_mat
         object
         (class Mat)
         (help "background material for patch")
      )
      (overlay_mat
         object
         (class Mat)
         (help "Overlay material for patch")
      )
   )
)
(RenderDir
   (description "Wraps a PanelDir, to allow it to be used in a rendered tex")
   (allowed_dirs)
   (superclasses PanelDir)
   (editor
      (panel_dir
         object
         (class PanelDir)
         (help "PanelDir that we wrap")
      )
   )
   (types
      (shell
         (postprocess "")
         (editor
            (postprocess
               object
               (class PostProc)
               (help "Post process object to use when this panel is on screen")
               (post_sync {$this update_postproc})
            )
            (refresh_postproc
               script
               (script {$this update_postproc})
               (help "Refresh postprocessor selection on the tool")
            )
         )
         (update_postproc
            {if $edit_mode
               {if_else [postprocess]
                  {[postprocess] select}
                  {rnd reset_postproc}
               }
            }
         )
      )
   )
)
(WorldMapDir
   (description "A panel dir for the world tour map.")
   (allowed_dirs)
   (superclasses PanelDir)
   (editor
      SHELL_EDITOR
      (focal_distance float (help "Focal distance."))
      (blur_depth float (help "Blur depth."))
      (min_blur float (help "The min blur."))
      (max_blur float (help "The max blur."))
      (do_culling bool (help "Should hidden towns be culled?"))
      (town
         symbol
         (list {$this get_town_list})
         (help "Select a town to rotate the world to it.")
      )
      (zoom_in
         script
         (script {$this zoom_in_impl})
         (help "Zoom in to a town.")
      )
      (zoom_out
         script
         (script {$this zoom_out_impl})
         (help "Zoom out from a town.")
      )
      (animate_plane
         bool
         (help "Animate the plane when zooming?")
         (no_test)
      )
   )
   SHELL_TYPE
   (init {$this set_type default})
   (types
      (default
         (animate_plane TRUE)
         (zoom_in_grp '')
         (zoom_out_grp '')
         (update_postproc
            {print "Update called for WorldMapDir!\n\n"}
            {if $edit_mode
               {if_else [postprocess]
                  {[postprocess] select}
                  {rnd reset_postproc}
               }
            }
         )
         (get_random_numbered_object
            ($name_fmt)
            {do
               ($array {array 0})
               ($obj '')
               {foreach_int $i 0 9
                  {set $obj {sprintf $name_fmt $i}}
                  {if {exists $obj}
                     {push_back $array $obj}
                  }
               }
               {if_else {> {size $array} 0}
                  {random_elem $array}
                  ''
               }
            }
         )
         (zoom_in_impl
            {zoom.grp animate (dest {zoom.grp end_frame})}
            {if {exists zoom_in_cancel.grp}
               {zoom_in_cancel.grp set_frame 0}
            }
            {if [animate_plane]
               {set [zoom_in_grp] {$this get_random_numbered_object "zoom_in_%d.grp"}}
               {set [zoom_out_grp] {$this get_random_numbered_object "zoom_out_%d.grp"}}
               {if [zoom_in_grp]
                  {[zoom_in_grp] animate}
               }
            }
         )
         (zoom_out_impl
            {zoom.grp animate (dest 0)}
            {if [animate_plane]
               {if [zoom_in_grp]
                  {if_else {[zoom_in_grp] is_animating}
                     {if {exists zoom_in_cancel.grp}
                        {zoom_in_cancel.grp animate}
                     }
                     {if [zoom_out_grp]
                        {[zoom_out_grp] animate}
                     }
                  }
               }
            }
         )
      )
   )
)
#define TAP_SPACE (0.22)
#define NORM_SPACE (0.33)
#define BIG_SPACE (0.75)
(MidiParser
   (description "For controlling behavior from authored midi files")
   (editor)
   (init {$this set_type default})
   (types
      (default
         (inverted FALSE)
         (track_name 'PART DRUMS')
         (append_length FALSE)
         (text 0)
      )
      (drums_right_hand
         (track_name 'PART DRUMS')
         (inverted TRUE)
         (append_length TRUE)
         (compress TRUE)
         (message_type drum_rhand)
         (init
            {set [zero_length] TRUE}
            {set [max_gap] 2}
            {set $mp.ride_side TRUE}
            {set $mp.ride_dir FALSE}
         )
         (term {$this sec_offset_all WORLD_OFFSET_SEC})
         (text
            {if {has_substr $mp.val "ride_side"}
               {set $mp.ride_side {has_substr $mp.val "true"}}
            }
         )
         (allowed_notes 27 31 32 36 37 38 39 40 41 42 47 49 51)
         (midi
            {$this rt_compute_space}
            {$this add_message
               {switch $mp.val
                  (27
                     {cond
                        ({rt_test_space 2.5 NORM_SPACE} snare_sticktwirl_long)
                        ({rt_test_space 2.0 NORM_SPACE} snare_sticktwirl_med)
                        ({rt_test_space 1.4 NORM_SPACE} snare_sticktwirl_short)
                        ({rt_test_space BIG_SPACE BIG_SPACE} snare_big)
                        ({rt_test_space NORM_SPACE NORM_SPACE} snare)
                        ({rt_test_space TAP_SPACE TAP_SPACE} snare_tap)
                        ({rt_test_space 0 BIG_SPACE} snare_tap)
                        snare_hover
                     }
                  )
                  (31
                     {cond
                        ({rt_test_space NORM_SPACE NORM_SPACE} hihat)
                        ({rt_test_space TAP_SPACE TAP_SPACE} hihat_tap)
                        ({rt_test_space 0 BIG_SPACE} hihat_tap)
                        hihat_hover
                     }
                  )
                  (32
                     {cond
                        ({rt_test_space TAP_SPACE TAP_SPACE} cowbell_r)
                        ({rt_test_space 0 BIG_SPACE} cowbell_r)
                        cowbell_r_hover
                     }
                  )
                  (36
                     {if_else {== {$this prev_val} 38}
                        {cond
                           ({&&
                                 {<=
                                    {$this delta}
                                    1}
                                 {rt_test_space TAP_SPACE TAP_SPACE}}
                              crash_l_side
                           )
                           ({<= {$this delta} 1} crash_l_hover)
                           ({rt_test_space BIG_SPACE BIG_SPACE} crash_l_big)
                           ({rt_test_space TAP_SPACE TAP_SPACE} crash_l_soft)
                           ({rt_test_space 0 BIG_SPACE} crash_l_soft)
                           crash_l_hover
                        }
                        {cond
                           ({rt_test_space BIG_SPACE BIG_SPACE} crash_l_big)
                           ({rt_test_space TAP_SPACE TAP_SPACE} crash_l_soft)
                           ({rt_test_space 0 BIG_SPACE} crash_l_soft)
                           crash_l_hover
                        }
                     }
                  )
                  (37
                     {cond
                        ({rt_test_space TAP_SPACE TAP_SPACE} crash_l)
                        ({rt_test_space 0 BIG_SPACE} crash_l)
                        crash_l_hover
                     }
                  )
                  (38
                     {if_else {== {$this prev_val} 36}
                        {cond
                           ({&&
                                 {<=
                                    {$this delta}
                                    1}
                                 {rt_test_space TAP_SPACE TAP_SPACE}}
                              crash_r_side
                           )
                           ({<= {$this delta} 1} crash_r_hover)
                           ({rt_test_space BIG_SPACE BIG_SPACE} crash_r_big)
                           ({rt_test_space TAP_SPACE TAP_SPACE} crash_r_soft)
                           ({rt_test_space 0 BIG_SPACE} crash_r_soft)
                           crash_r_hover
                        }
                        {cond
                           ({rt_test_space BIG_SPACE BIG_SPACE} crash_r_big)
                           ({rt_test_space TAP_SPACE TAP_SPACE} crash_r_soft)
                           ({rt_test_space 0 BIG_SPACE} crash_r_soft)
                           crash_r_hover
                        }
                     }
                  )
                  (39
                     {cond
                        ({rt_test_space TAP_SPACE TAP_SPACE} crash_r)
                        ({rt_test_space 0 BIG_SPACE} crash_r)
                        crash_r_hover
                     }
                  )
                  (40 crash_r_grab)
                  (41 crash_l_grab)
                  (42
                     {if_else
                        {&&
                           $mp.ride_side
                           {'||'
                              {&& {== {$this prev_val} 42} {< $mp.prev_start 2}}
                              {&& {== {$this next_val} 42} {< {$this delta} 2}}
                           }
                        }
                        {if_else {rt_test_space TAP_SPACE TAP_SPACE}
                           {if_else {== {{$this dir} get attitude} kGenreRocker}
                              {if_else $mp.ride_dir
                                 {do
                                    {set $mp.ride_dir FALSE}
                                    ride_side_r
                                 }
                                 {do
                                    {set $mp.ride_dir TRUE}
                                    ride_side_l
                                 }
                              }
                              {do
                                 {set $mp.ride_dir FALSE}
                                 ride_tap
                              }
                           }
                           {do
                              {set $mp.ride_dir FALSE}
                              ride_tap
                           }
                        }
                        {do
                           {set $mp.ride_dir FALSE}
                           ride_hover
                        }
                     }
                  )
                  (47
                     {cond
                        ({rt_test_space BIG_SPACE BIG_SPACE} tom_l_big)
                        ({rt_test_space NORM_SPACE NORM_SPACE} tom_l)
                        ({rt_test_space TAP_SPACE TAP_SPACE} tom_l_tap)
                        ({rt_test_space 0 BIG_SPACE} tom_l_tap)
                        tom_l_hover
                     }
                  )
                  (49
                     {cond
                        ({rt_test_space BIG_SPACE BIG_SPACE} tom_r_big)
                        ({rt_test_space NORM_SPACE NORM_SPACE} tom_r)
                        ({rt_test_space TAP_SPACE TAP_SPACE} tom_r_tap)
                        ({rt_test_space 0 BIG_SPACE} tom_r_tap)
                        tom_r_hover
                     }
                  )
                  (51
                     {cond
                        ({rt_test_space BIG_SPACE BIG_SPACE} floortom_big)
                        ({rt_test_space NORM_SPACE NORM_SPACE} floortom)
                        ({rt_test_space TAP_SPACE TAP_SPACE} floortom_tap)
                        ({rt_test_space 0 BIG_SPACE} floortom_tap)
                        floortom_hover
                     }
                  )
                  kDataUnhandled
               }
            }
         )
         MIDIPARSER_CONVERTFUNCTIONS
      )
      (eq_bass_parser
         (track_name 'PART BASS')
         (inverted TRUE)
         (append_length TRUE)
         (compress TRUE)
         (message_type midi_parser)
         (init
            {set [max_gap] 0.24}
            {set [min_gap] 0.2}
         )
         (idle {$this insert_idle still 0.1 0.3 0.2})
         (gem {$this add_message bass})
      )
      (eq_guitar_parser
         (track_name 'PART GUITAR')
         (inverted TRUE)
         (append_length TRUE)
         (compress TRUE)
         (message_type midi_parser)
         (init
            {set [max_gap] 0.24}
            {set [min_gap] 0.2}
         )
         (idle {$this insert_idle still 0.1 0.3 0.2})
         (gem {$this add_message guitar})
      )
      (eq_kick_parser
         (track_name 'PART DRUMS')
         (inverted TRUE)
         (append_length TRUE)
         (compress TRUE)
         (message_type midi_parser)
         (init
            {set [max_gap] 0.24}
            {set [min_gap] 0.2}
         )
         (idle {$this insert_idle still 0.1 0.1 0.1})
         (gem
            {switch $mp.val
               (kMPGem1 {$this add_message kick})
            }
         )
      )
      (eq_snare_parser
         (track_name 'PART DRUMS')
         (inverted TRUE)
         (append_length TRUE)
         (compress TRUE)
         (message_type midi_parser)
         (init
            {set [max_gap] 0.24}
            {set [min_gap] 0.2}
         )
         (idle {$this insert_idle still 0.1 0.1 0.1})
         (gem
            {switch $mp.val
               (kMPGem2 {$this add_message snare})
            }
         )
      )
      (eq_cymbal_parser
         (track_name 'PART DRUMS')
         (inverted TRUE)
         (append_length TRUE)
         (compress TRUE)
         (message_type midi_parser)
         (init
            {set [max_gap] 0.15}
            {set [min_gap] 0.125}
         )
         (idle {$this insert_idle still 7.5e-2 7.5e-2 7.5e-2})
         (gem
            {switch $mp.val
               (
                  (kMPGem3 kMPGem4 kMPGem5)
                  {$this add_message cymbal}
               )
            }
         )
      )
      (eq_vocal_parser
         (track_name 'PART VOCALS')
         (inverted TRUE)
         (append_length TRUE)
         (compress TRUE)
         (message_type midi_parser)
         (init
            {set [max_gap] 0.24}
            {set [min_gap] 0.2}
         )
         (idle {$this insert_idle still 0.1 0.3 0.2})
         (midi {$this add_message vocal})
      )
   )
)
#define COMMON_BANDTRACK_EDITOR (
   (instrument symbol (list ('' bass drum guitar vocals)))
   (player_intro object (class RndDir))
   (star_power_meter object (class RndDir))
   (streak_meter object (class StreakMeterDir))
   (popup_object object (class RndDir))
   (player_feedback object (class RndDir))
   (failed_feedback object (class RndDir))
   (retract_trig object (class EventTrigger))
   (reset_trig object (class EventTrigger))
   (deploy_trig object (class EventTrigger))
   (stop_deploy_trig object (class EventTrigger))
   (intro_trig object (class EventTrigger))
   (disable_player script (script {$this disable_player 1}))
   (save_player
      script
      (script
         {$this save_player}
         {script_task kTaskSeconds (delay 1.5) (script {$this enable_player})}
      )
   )
)
#define COMMON_BANDTRACK_DATA ((min_finale_help_time 5.0))
(GemTrackDir
   (description "band 2 TrackDir for gem tracks")
   (superclasses TrackDir)
   (editor
      (reset script (script {$this reset}))
      (deploy script (script {$this deploy}))
      (stop_deploy script (script {$this stop_deploy}))
      (mash script (script {$this mash 0}))
      (effect_selector object (class RndDir))
      (practice_reset script (script {$this practice_reset}))
      (config_cam
         (indent
            (1_player_regular
               script
               (script
                  {$this set_pitch -44.5}
                  {$this set_fov 21.0516}
                  {$this set_cam_pos 0 -83.5 18.5}
               )
               (help "1 gem track, regular aspect")
            )
            (1_player_wide
               script
               (script
                  {$this set_pitch -44.5}
                  {$this set_fov 21.0516}
                  {$this set_cam_pos 0 -80.98 18.7}
               )
               (help "1 gem track, widescreen aspect")
            )
            (2_players_regular
               script
               (script
                  {$this set_pitch -41.4}
                  {$this set_fov 19}
                  {$this set_cam_pos 0 -114 26}
               )
               (help "2 gem tracks, regular aspect")
            )
            (2_players_wide
               script
               (script
                  {$this set_pitch -41.4}
                  {$this set_fov 19}
                  {$this set_cam_pos 0 -107.56 24.54}
               )
               (help "2 gem tracks, widescreen aspect")
            )
            (3_players_regular
               script
               (script
                  {$this set_pitch -39.25}
                  {$this set_fov 19}
                  {$this set_cam_pos 0 -163 38.5}
               )
               (help "3 gem tracks, regular aspect")
            )
            (3_players_wide
               script
               (script
                  {$this set_pitch -40}
                  {$this set_fov 19}
                  {$this set_cam_pos 0 -129.7 29.7}
               )
               (help "3 gem tracks, widescreen aspect")
            )
         )
         (help "Configure the camera as we would in game")
      )
      (streak_meter_offset
         float
         (help "The projected distance between the now bar and the streak meter")
         (post_sync {$this set_pitch [track_pitch]})
      )
      (streak_meter_tilt
         float
         (help "The tilt of the streak meter relative to game.cam, in degrees")
         (post_sync {$this set_pitch [track_pitch]})
      )
      COMMON_BANDTRACK_EDITOR
      (rotater object (class Group))
      (surface_objects
         (indent
            (surface_mesh object (class Mesh))
            (surface_texture object (class Tex))
            (surface_mat object (class Mat))
         )
      )
      (track_env object (class Environ))
      (game_cam object (class Cam))
      (super_streak_triggers
         (indent
            (super_streak_on_trig object (class EventTrigger))
            (super_streak_off_trig object (class EventTrigger))
         )
      )
      (spotlight_phrase_success_trig object (class EventTrigger))
      (solo_hit_trig object (class EventTrigger))
      (gem_mash_anims
         (indent
            (gem_mash_0_anim object (class PropAnim))
            (gem_mash_1_anim object (class PropAnim))
            (gem_mash_2_anim object (class PropAnim))
            (gem_mash_3_anim object (class PropAnim))
            (gem_mash_4_anim object (class PropAnim))
         )
      )
      (drum_mash_anims
         (indent
            (drum_mash_1_anim object (class PropAnim))
            (drum_mash_2_anim object (class PropAnim))
            (drum_mash_3_anim object (class PropAnim))
            (drum_mash_4_anim object (class PropAnim))
         )
      )
      (fill_hit_trigs
         (indent
            (fill_hit_1_trig object (class EventTrigger))
            (fill_hit_2_trig object (class EventTrigger))
            (fill_hit_3_trig object (class EventTrigger))
         )
      )
      (drummer_objects
         (indent
            (kick_drummer_trig object (class EventTrigger))
            (drum_fill_reset_trig object (class EventTrigger))
            (drum_mash_2nd_pass_activate_anim object (class PropAnim))
            (drum_mash_hit_anim_grp object (class Group))
         )
      )
      (fill_colors_grp object (class Group))
      (lod_anim object (class PropAnim))
      (glow_widgets (array object (class TrackWidget)))
   )
   (types
      (test
         (editor
            (spew_gems script (script {$this spew_gems}))
            (clear_gems script (script {$this clear_gems}))
            (fit_meshes
               (array object (class Mesh))
               (help
                  "Meshes which need to be fit to the cross section of the track surface."
               )
            )
            (dump script (script {$this dump}))
            (challenge_hide script (script {$this challenge_hide}))
            (challenge_show script (script {$this challenge_show}))
         )
         (fit_meshes ())
         (object_type_list
            ($obj_type)
            {do
               ($array {array 0})
               {push_back $array none}
               {$this iterate $obj_type $obj {push_back $array {symbol {$obj name}}}}
               {sort $array}
               $array
            }
         )
         (spew_gems
            {if {! {exists spew_gems_test}}
               {$this toggle_running}
               {thread_task kTaskBeats
                  (name spew_gems_test)
                  (script
                     {set $lane 0}
                     {switch $beat
                        (0
                           {$this add_test_widget "bar_measure.wid" 2}
                           {set $beat 1}
                        )
                        (1
                           {$this add_test_widget "bar_half_beat.wid" 2}
                           {set $beat 2}
                        )
                        (2
                           {$this add_test_widget "bar_beat.wid" 2}
                           {set $beat 3}
                        )
                        (3
                           {$this add_test_widget "bar_half_beat.wid" 2}
                           {set $beat 4}
                        )
                        (4
                           {$this add_test_widget "bar_beat.wid" 2}
                           {set $beat 5}
                        )
                        (5
                           {$this add_test_widget "bar_half_beat.wid" 2}
                           {set $beat 6}
                        )
                        (6
                           {$this add_test_widget "bar_beat.wid" 2}
                           {set $beat 7}
                        )
                        (7
                           {$this add_test_widget "bar_half_beat.wid" 2}
                           {set $beat 0}
                        )
                     }
                     {set $num_gems {random_int 3 4}}
                     {if {== $num_gems 1}
                        {set $hopo {random_int 0 2}}
                     }
                     {foreach_int $gem 0 $num_gems
                        {set $lane {random_int 0 5}}
                        {if_else {== [instrument] drum}
                           {switch $lane
                              (0 {$this add_test_widget "drum_red.wid" $lane})
                              (1 {$this add_test_widget "drum_yellow.wid" $lane})
                              (2 {$this add_test_widget "gem_kick.wid" $lane})
                              (3 {$this add_test_widget "drum_blue.wid" $lane})
                              (4 {$this add_test_widget "drum_green.wid" $lane})
                           }
                           {switch $lane
                              (0
                                 {if_else $hopo
                                    {$this add_test_widget "gem_green_hopo.wid" $lane}
                                    {$this add_test_widget "gem_green.wid" $lane}
                                 }
                              )
                              (1
                                 {if_else $hopo
                                    {$this add_test_widget "gem_red_hopo.wid" $lane}
                                    {$this add_test_widget "gem_red.wid" $lane}
                                 }
                              )
                              (2
                                 {if_else $hopo
                                    {$this add_test_widget "gem_yellow_hopo.wid" $lane}
                                    {$this add_test_widget "gem_yellow.wid" $lane}
                                 }
                              )
                              (3
                                 {if_else $hopo
                                    {$this add_test_widget "gem_blue_hopo.wid" $lane}
                                    {$this add_test_widget "gem_blue.wid" $lane}
                                 }
                              )
                              (4
                                 {if_else $hopo
                                    {$this add_test_widget "gem_orange_hopo.wid" $lane}
                                    {$this add_test_widget "gem_orange.wid" $lane}
                                 }
                              )
                           }
                        }
                     }
                     {$task sleep 1}
                     {$task loop}
                  )
               }
            }
         )
         (clear_gems
            {if {exists spew_gems_test}
               {delete spew_gems_test}
               {$this toggle_running}
            }
         )
         (dump
            {print "surface_texture: " [surface_texture] "\n"}
            {print "surface_mesh: " [surface_mesh] "\n"}
            {print "effect_selector: " [effect_selector] "\n"}
            {print "gem_track_index: " [gem_track_index] "\n"}
            {print "num_tracks: " [num_tracks] "\n"}
            {print "multiplier: " [multiplier] "\n"}
            {print "kick_pass_counter: " [kick_pass_counter] "\n"}
         )
         (challenge_hide
            {set $trigger {$this find "playerset_off.trig"}}
            {if {&& $trigger {== {$trigger class_name} EventTrigger}}
               {$trigger trigger}
            }
         )
         (challenge_show
            {set $trigger {$this find "playerset_on.trig"}}
            {if {&& $trigger {== {$trigger class_name} EventTrigger}}
               {$trigger trigger}
            }
         )
         #ifdef HX_EE
         (track_fading TRUE)
         #endif
      )
   )
   COMMON_BANDTRACK_DATA
)
(VocalTrackDir
   (description "band 2 dir for vocal track")
   (superclasses RndDir)
   (editor
      (reset script (script {$this reset}))
      (deploy script (script {$this deploy}))
      (stop_deploy script (script {$this stop_deploy}))
      (static_vocals
         bool
         (post_sync {$this set_static_vocals [static_vocals]})
         (no_test)
      )
      (test_phrase_meter
         float
         (post_sync {$this set_phrase_meter [test_phrase_meter]})
         (no_test)
      )
      (scrolling_lyric_colors
         (indent
            (scrolling_normal color (help "Color of the normal lyrics."))
            (scrolling_now color (help "Color of the current lyric."))
            (scrolling_past
               color
               (help "Color of the lyrics after they have been read.")
            )
            (scrolling_style color (help "Color of the normal lyrics."))
            (scrolling_style_now color (help "Color of the current lyric."))
            (scrolling_style_past
               color
               (help "Color of the lyrics after they have been read.")
            )
         )
      )
      (static_lyric_colors
         (indent
            (static_preview color (help "Color of the preview lyrics"))
            (static_normal color (help "Color of the normal lyrics."))
            (static_now color (help "Color of the current lyric."))
            (static_past color (help "Color of the lyrics after they have been read."))
            (static_preview_style color (help "Color of the preview lyrics"))
            (static_normal_style color (help "Color of the normal lyrics."))
            (static_now_style color (help "Color of the current lyric."))
            (static_past_style
               color
               (help "Color of the lyrics after they have been read.")
            )
         )
      )
      (note_tubes
         (indent
            (scrolling_pitched_tube object (class Line))
            (scrolling_unpitched_tube object (class Line))
            (scrolling_pitched_style_tube object (class Line))
            (scrolling_unpitched_style_tube object (class Line))
            (static_pitched_tube object (class Line))
            (static_unpitched_tube object (class Line))
            (static_pitched_style_tube object (class Line))
            (static_unpitched_style_tube object (class Line))
         )
      )
      (background_colors
         (indent
            (background color (help "Color of the background."))
            (background_spotlight
               color
               (help "Color of the background in a spotlight phrase.")
            )
         )
      )
      (feedback_colors
         (array color)
         (help "Colors of the rating text for the different ratings.")
      )
      (feedback_state
         int
         (range 0 4)
         (post_sync {$this set_feedback_state [feedback_state]})
         (help
            "Rating after a phrase 0 - Lousy 1 - Poor 2 - Ok 3 - Good 4 - Great."
         )
         (no_test)
      )
      (preview_z float (help "The height at which preview lyrics are shown"))
      (current_z float (help "The height at which current lyrics are shown"))
      (test_arrow_visible
         bool
         (post_sync {$this set_arrow_visible [test_arrow_visible]})
         (no_test)
      )
      (test_pitched
         bool
         (post_sync {$this set_pitched [test_pitched]})
         (no_test)
      )
      (tube_widths
         (array float)
         (fixed_size TRUE)
         (help "note tube widths per difficulty")
      )
      (phonome_tube_width float (help "width of the phonome tube"))
      (vocalist_volume object (class RndDir))
      (configurable_objects
         (array object (class Trans))
         (help "Objects which can change transform or showing per configuration.")
      )
      (side_fade_length float (post_sync {$this update_fade}))
      COMMON_BANDTRACK_EDITOR
      (tambourine_objects
         (indent
            (tambourine_smasher object (class RndDir))
            (tambourine_now_show_trig object (class EventTrigger))
            (tambourine_now_hide_trig object (class EventTrigger))
         )
      )
      (pitch_arrow_objects
         (indent
            (pitch_arrow_group object (class Group))
            (arrow_visible_anim object (class PropAnim))
            (pitch_arrow_split_close_trig object (class EventTrigger))
            (pitch_arrow_split_open_trig object (class EventTrigger))
         )
      )
      (phrase_feedback_objects
         (indent
            (phrase_feedback_txt object (class Text))
            (phrase_feedback_trig object (class EventTrigger))
         )
      )
      (spotlight_success_objects
         (indent
            (spotlight_sparkles_only_trig object (class EventTrigger))
            (spotlight_phrase_success_trig object (class EventTrigger))
         )
      )
      (new_phrase_objects
         (indent
            (new_phrase_trig object (class EventTrigger))
            (flare_trig object (class EventTrigger))
         )
      )
      (scoring_objects
         (indent
            (scoring_trig object (class EventTrigger))
            (scoring_stop_trig object (class EventTrigger))
         )
      )
   )
   (types
      (test
         (editor (text_lyrics script (script {$this test_lyrics})))
         (test_lyrics {word.txt set_text "Current Line"})
      )
   )
   COMMON_BANDTRACK_DATA
)
#define COMMON_TRACKPANELDIR_EDITOR (
   (view_time_easy float (post_sync {$this configure_tracks}))
   (view_time_expert float (post_sync {$this configure_tracks}))
   (net_track_alpha float (post_sync {$this configure_tracks}))
   (configuration
      object
      (class Object)
      (post_sync {$this set_configuration [configuration]})
      (help "current configuration")
      (no_test)
   )
   (configurable_objects
      (array object (class Trans))
      (help "Objects which can change transform or showing per configuration.")
   )
)
(H2HTrackPanelDir
   (description "panel dir that handles tracks & hud in head-to-head mode")
   (superclasses PanelDir)
   (editor
      (reset
         script
         (script
            {$this configure_tracks}
            {$this reset}
         )
      )
      (track_0_net
         bool
         (post_sync {$this configure_tracks})
         (no_test)
      )
      (track_1_net
         bool
         (post_sync {$this configure_tracks})
         (no_test)
      )
      (test_score
         int
         (post_sync {$this set_score_diff [test_score]})
         (no_test)
      )
      (score_duel
         bool
         (post_sync {$this configure_tracks})
         (no_test)
      )
      COMMON_TRACKPANELDIR_EDITOR
      (vocal_game
         bool
         (post_sync
            {$this configure_tracks}
            {$this play_intro}
         )
         (read_only TRUE)
      )
   )
   (types)
)
(TrackPanelDir
   (description "panel dir that handles tracks & hud")
   (superclasses PanelDir)
   (editor
      (reset
         script
         (script
            {$this configure_tracks}
            {$this reset}
         )
      )
      (bass
         int
         (list ("kTrackOff" "kTrackLocal" "kTrackNet"))
         (post_sync
            {bass set simulated_net {== [bass] kTrackNet}}
            {$this configure_tracks}
         )
      )
      (drum
         int
         (list ("kTrackOff" "kTrackLocal" "kTrackNet"))
         (post_sync
            {drum set simulated_net {== [drum] kTrackNet}}
            {$this configure_tracks}
         )
      )
      (guitar
         int
         (list ("kTrackOff" "kTrackLocal" "kTrackNet"))
         (post_sync
            {guitar set simulated_net {== [guitar] kTrackNet}}
            {$this configure_tracks}
         )
      )
      (vocals
         int
         (list ("kTrackOff" "kTrackLocal" "kTrackNet"))
         (post_sync
            {vocals set simulated_net {== [vocals] kTrackNet}}
            {$this configure_tracks}
         )
      )
      (test_multiplier
         int
         (post_sync {$this set_multiplier [test_multiplier]})
         (no_test)
      )
      (normal_mode
         script
         (script
            {applause_meter.grp set_showing FALSE}
            {scoreboard set_config normal}
         )
      )
      (botb_mode
         script
         (script
            {applause_meter.grp set_showing TRUE}
            {scoreboard set_config botb}
         )
      )
      (botb_star_mode
         script
         (script
            {applause_meter.grp set_showing TRUE}
            {scoreboard set_config botb_star}
         )
      )
      COMMON_TRACKPANELDIR_EDITOR
      (turn_everything_on
         script
         (script
            {player_intro_01 intro}
            {player_intro_02 intro}
            {player_intro_03 intro}
            {player_intro_01 setup_player "G" "GamerTag"}
            {player_intro_02 setup_player "D" "GamerTag"}
            {player_intro_03 setup_player "B" "GamerTag"}
            {player_intro_01 set_talking TRUE}
            {player_intro_02 set_talking TRUE}
            {player_intro_03 set_talking TRUE}
            {player_feedback_01 start_solo}
            {player_feedback_01 set_percent 25}
            {player_feedback_02 start_solo}
            {player_feedback_02 set_percent 100}
            {player_feedback_03 start_solo}
            {player_feedback_03 set_percent 50}
            {failed_feedback_01 failed 3}
            {failed_feedback_02 failed 3}
            {failed_feedback_03 failed 3}
            {popup_help_01 drum_fill}
            {popup_help_02 drum_fill}
            {popup_help_03 drum_fill}
            {scoreboard set_score_milo 1234567}
            {scoreboard set_opponent_score_milo 1234567}
            {crowd_meter worst_case}
            {ending_bonus start}
            {$this set_multiplier 4}
            {endgame_feedback_01 end_game_start}
            {endgame_feedback_02 end_game_start}
            {endgame_feedback_03 end_game_start}
            {endgame_feedback_vox end_game_start}
            {applause_meter.grp set_showing TRUE}
            {scoreboard set_config botb_star}
            {mtv_overlay set_showing TRUE}
            {do
               ($obj)
               {set $obj {vocals get popup_object}}
               {if {!= $obj ""}
                  {$obj scream}
               }
               {set $obj {vocals get player_feedback}}
               {if {!= $obj ""}
                  {$obj start_solo}
                  {$obj set_percent 35}
               }
               {set $obj {vocals get player_intro}}
               {if {!= $obj ""}
                  {$obj setup_player "V" "GamerTag"}
                  {$obj intro}
                  {$obj set_talking TRUE}
               }
            }
         )
      )
      (turn_everything_off
         script
         (script
            {player_intro_01 reset}
            {player_intro_02 reset}
            {player_intro_03 reset}
            {player_intro_01 set_talking FALSE}
            {player_intro_02 set_talking FALSE}
            {player_intro_03 set_talking FALSE}
            {player_feedback_01 reset}
            {player_feedback_02 reset}
            {player_feedback_03 reset}
            {failed_feedback_01 reset}
            {failed_feedback_02 reset}
            {failed_feedback_03 reset}
            {popup_help_01 reset}
            {popup_help_02 reset}
            {popup_help_03 reset}
            {scoreboard set_score_milo 0}
            {scoreboard set_opponent_score_milo 0}
            {scoreboard set_config normal}
            {crowd_meter reset}
            {ending_bonus reset}
            {$this set_multiplier 1}
            {endgame_feedback_01 end_game_end}
            {endgame_feedback_02 end_game_end}
            {endgame_feedback_03 end_game_end}
            {endgame_feedback_vox end_game_end}
            {applause_meter.grp set_showing FALSE}
            {mtv_overlay set_showing FALSE}
            {do
               ($obj)
               {set $obj {vocals get popup_object}}
               {if {!= $obj ""}
                  {$obj reset}
               }
               {set $obj {vocals get player_feedback}}
               {if {!= $obj ""}
                  {$obj reset}
               }
               {set $obj {vocals get player_intro}}
               {if {!= $obj ""}
                  {$obj reset}
               }
            }
         )
      )
      (game_won script (script {$this game_won}))
      (game_lost script (script {$this game_lost}))
      (everyone_deploy
         script
         (script
            {bass deploy}
            {guitar deploy}
            {drum deploy}
            {vocals deploy}
            {crowd_meter deploy bass}
            {crowd_meter deploy guitar}
            {crowd_meter deploy drum}
            {crowd_meter deploy vocals}
         )
      )
      (everyone_stop_deploy
         script
         (script
            {bass stop_deploy}
            {guitar stop_deploy}
            {drum stop_deploy}
            {vocals stop_deploy}
            {crowd_meter stop_deploy bass}
            {crowd_meter stop_deploy guitar}
            {crowd_meter stop_deploy drum}
            {crowd_meter stop_deploy vocals}
         )
      )
      (spew_gems
         script
         (script
            {guitar spew_gems}
            {drum spew_gems}
            {bass spew_gems}
            {{guitar find smasher_plate_guitar} fast_test}
            {{bass find smasher_plate_guitar} fast_test}
            {{drum find smasher_plate_drum} fast_test}
         )
      )
      (clear_gems
         script
         (script
            {guitar clear_gems}
            {drum clear_gems}
            {bass clear_gems}
            {{guitar find smasher_plate_guitar} stop_test}
            {{bass find smasher_plate_guitar} stop_test}
            {{drum find smasher_plate_drum} stop_test}
         )
      )
      (start_finale script (script {$this game_won_finale}))
   )
   (types)
)
(StreakMeterDir
   (description "streak meter for band tracks")
   (superclasses RndDir)
)
(EndingBonusDir
   (description "BRE/unison phrase popup")
   (superclasses RndDir)
   (editor
      (start
         script
         (script {$this start})
         (help "Start the ending bonus.")
      )
      (reset
         script
         (script {$this reset})
         (help "Reset the ending bonus.")
      )
      (success
         script
         (script {$this success})
         (help "Plays success.trig at the end of the bonus.")
      )
      (failure
         script
         (script {$this coda_end})
         (help "Plays failure.trig at the end of the bonus.")
      )
      (score
         int
         (post_sync {$this set_score [score]})
         (help "Ending bonus score.")
         (no_test)
      )
      (unison_start script (script {$this unison_start}))
      (unison_end script (script {$this unison_end}))
      (unison_succeed script (script {$this unison_succeed}))
   )
   (types)
)
(LoadingPanelDir
   (description "Panel for loading screens w/characters")
   (superclasses WorldDir)
   (editor
      (clip_file_path file (help "Milo CharClipSet from which to set poses"))
      (import
         script
         (script
            {do
               {$this import_clip}
               {if {$this exists bass}
                  {set [edit_char] {$this find bass}}
                  {$this save_pose}
               }
               {if {$this exists drum}
                  {set [edit_char] {$this find drum}}
                  {$this save_pose}
               }
               {if {$this exists guitar}
                  {set [edit_char] {$this find guitar}}
                  {$this save_pose}
               }
               {if {$this exists vocals}
                  {set [edit_char] {$this find vocals}}
                  {$this save_pose}
               }
            }
         )
         (help "Reset char poses from CharClipSet")
      )
      (edit_char
         object
         (class CompositeCharacter)
         (help "Pick a character to edit")
      )
      (h2h_char_type
         symbol
         (list (guitar bass drum vocals))
         (help "Type for H2H character, use whichever for non-H2H screens")
      )
      (finalize_pose
         script
         (script {$this save_pose})
         (help "Pose character from skeleton")
      )
   )
   (types
      (shell
         (clip_flags
            ("kLeftArm" "kRightArm" "kLeftLeg" "kRightLeg" "kAnimateEyes" "kLookAtCam")
         )
         (change_proxies {handle (char_cache change_characters $this)})
      )
   )
)
#define kMomentNone (0)
#define kMomentSuccess (1)
#define kMomentFail (2)
(EventCompleteDir
   (description "PanelDir for tour event complete screens")
   (superclasses PanelDir)
   (editor
      (enabled bool (no_test))
      (play
         script
         (script {$this play})
         (help "Play animations")
      )
      (skip
         script
         (script {$this skip})
         (help "Skip to end of animations")
      )
      (items
         (array
            (struct
               (anim object (class Anim))
               (icon_label object (class BandLabel))
               (icon_label_str string)
               (text_label object (class BandLabel))
               (text_label_str string)
               (text_label_start int)
               (text_label_end int)
               (sfx object (class Sequence))
               (active bool)
               (moment_success_group object (class Group))
               (moment_fail_group object (class Group))
               (moment_name symbol)
               (moment_success_label object (class BandLabel))
               (moment_fail_label object (class BandLabel))
               (moment_str string)
               (moment_end int)
               (moment_sfx object (class Sequence))
               (moment_state int (list ("kMomentNone" "kMomentSuccess" "kMomentFail")))
            )
         )
      )
      (initial_delay float range (0 5.0))
      (anim_time float range (0 5.0))
      (count_time float range (0 5.0))
      (moment_time float range (0 5.0))
      (challenge_list object (class BandList))
   )
   (types)
)
(ScoreboardDir
   (description "In-game scoreboard")
   (superclasses RndDir)
   (types)
   (editor
      (reset script (script {$this reset}))
      (max_stars int (post_sync {$this set_max_stars [max_stars]}))
      (test_score
         float
         (post_sync {$this set_score [test_score]})
         (help "Current score.")
      )
      (test_stars float (post_sync {$this set_num_stars [test_stars]}))
      (test_opponent_score
         float
         (post_sync {$this set_opponent_score [test_opponent_score]})
         (help "BotB opponent's total score.")
      )
      (sound bool "Play a sound when the stars change")
      (config
         symbol
         (list (normal botb botb_star))
         (post_sync {$this set_config [config]})
      )
      (stars (array object (class RndDir)))
      (gold_stars (array object (class BandLabel)))
   )
)
(BandPowerMeterDir
   (description "Overdrive power meter")
   (superclasses RndDir)
   (types)
   (editor
      (initialize
         script
         (script
            {$this reset}
            {$this set_showing TRUE}
         )
      )
      (test_energy
         float
         (post_sync {$this set_energy [test_energy] [state] guitar})
      )
      (energy_added script (script {$this energy_added}))
      (energy_ready script (script {$this energy_ready guitar}))
      (stop script (script {$this stop_deploy}))
      (disable_overdrive script (script {$this set_no_overdrive}))
      (vocal_meter bool (read_only TRUE))
   )
)