{new UIPanel
   bonus_menupanel
   (file "quickplay/quickplay_venue.milo")
   (selection_memory 0)
   (enter
      {do
         {choosevenue.lbl set text_token "bonus"}
         {delete Venue_BG_BG.mesh}
         {delete Venue_BG_Border.mesh}
         {set $band_sel_mode 0}
         {venue.lst set_data
            (
               play_a_show
               theatre
               autoplay
               cutsceneviewer
               framerate
               #ifndef _SHIP
               camera_debug
               #endif
               #ifdef HX_NG
               musicstore
               #endif
            )
         }
         {$this set_focus venue.lst}
         {venue.lst set_selected [selection_memory]}
      }
   )
   (BUTTON_DOWN_MSG
      {if {== $action kAction_Cancel}
         {synth play button_back}
      }
      kDataUnhandled
   )
   (SELECT_MSG
      {do
         ($selected {venue.lst selected_sym})
         {$this exec_sel $selected}
      }
   )
   (SCROLL_MSG
      {synth play button_focus}
      {$this set selection_memory {venue.lst selected_pos}}
   )
   (exec_sel
      ($bonus_sel)
      {synth play button_select}
      {switch $bonus_sel
         ((theatre autoplay)
            {if_else {gamecfg is_missing_mic $player_num FALSE}
               {do
                  #ifdef KIOSK_DEMO
                  {vocalist_must_have_mic_screen set message demo_solo_vocalist_needs_mic}
                  #else
                  {vocalist_must_have_mic_screen set message solo_vocalist_needs_mic}
                  #endif
                  {ui push_screen vocalist_must_have_mic_screen}
               }
               {if_else {{profile_mgr get_profile $player_num} num_bands}
                  {do
                     {set $band_sel_mode 1}
                     {gamemode set_mode $bonus_sel $player_num}
                     {ui goto_screen tour_band_sel_screen}
                     {fx fade_out}
                  }
                  {do
                     {gamemode set_mode $bonus_sel $player_num}
                     {ui goto_screen {gamemode get matchmaking_screen}}
                     {fx fade_out}
                  }
               }
            }
         )
         (camera_debug
            {if_else {gamecfg is_missing_mic $player_num FALSE}
               {do
                  #ifdef KIOSK_DEMO
                  {vocalist_must_have_mic_screen set message demo_solo_vocalist_needs_mic}
                  #else
                  {vocalist_must_have_mic_screen set message solo_vocalist_needs_mic}
                  #endif
                  {ui push_screen vocalist_must_have_mic_screen}
               }
               {if_else {{profile_mgr get_profile $player_num} num_bands}
                  {do
                     {set $band_sel_mode 1}
                     {gamemode set_mode camera_debug $player_num}
                     {ui goto_screen tour_band_sel_screen}
                     {fx fade_out}
                  }
                  {do
                     {gamemode set_mode camera_debug $player_num}
                     {ui goto_screen {gamemode get matchmaking_screen}}
                     {fx fade_out}
                  }
               }
            }
         )
         (cutsceneviewer
            {if_else {{profile_mgr get_profile $player_num} num_bands}
               {do
                  {set $band_sel_mode 2}
                  {gamemode set_mode tour_local $player_num}
                  {ui goto_screen tour_band_sel_screen}
               }
               {ui goto_screen cutscene_menuscreen}
            }
         )
         (framerate {ui goto_screen frame_rate_screen})
         (play_a_show
            {gamemode set_mode play_a_show}
            {play_a_show_panel set played_songs {array 0}}
            {ui goto_screen {gamemode get matchmaking_screen}}
         )
         (musicstore
            {do
               #ifdef HX_XBOX
               {input_mgr set_user {user_mgr get_band_user $player_num}}
               {gamemode set_mode store}
               {if_else
                  {'||'
                     {! {platform_mgr is_player_signed_into_live $player_num}}
                     {platform_mgr is_player_a_guest $player_num}
                  }
                  {ui push_screen main_store_signin_screen}
                  {ui push_screen main_store_find_cache_screen}
               }
               #endif
               #ifdef HX_PS3
               {gamemode set_mode store}
               {ui goto_screen store_enter_network_screen}
               #endif
               #ifdef HX_WII
               {ui goto_screen store_loading_screen}
               {force_goto_else_after_network_connect store_wii_enter_screen
                  main_screen
                  TRUE
               }
               #endif
               #ifdef HX_PC
               {ui goto_screen store_loading_screen}
               #endif
               {fx fade_out}
               {input_mgr set_user {user_mgr get_band_user $player_num}}
            }
         )
      }
   )
}
{new MainScreen
   bonus_menuscreen
   (back main_screen)
   (panels meta movie_panel bonus_menupanel tour_lower3rd_panel)
   (focus bonus_menupanel)
   (helpbar
      (
         (cancel helpbar_back)
         (confirm helpbar_confirm)
      )
   )
}
{new UIPanel
   cutscene_menupanel
   (file "quickplay/quickplay_venue.milo")
   (selection_memory 0)
   (enter
      {do
         {choosevenue.lbl set text_token "cutsceneviewer"}
         {delete Venue_BG_BG.mesh}
         {delete Venue_BG_Border.mesh}
         {venue.lst set_data
            (hotel_smash_up
               alien_abduction_02
               ;audition_1_guitar ;milo is 50 mb good luck
               #ifdef HX_WII
               audition_2_vocal ;loads on dolphin with extended memory
               #endif
               audition_3_drum
               audition_4_bass
               audition_testing
               #ifdef HX_WII
               alien_signing_screen_2
               alien_signing_screen_3
               #endif
               asteroid-23439
               backup_demolition_intro
               mj_dinochase
               icebreakerintro_alex_v01
               mtv_ad
               octopusattack_jo
               octopusattack_mj_latest_pass
               octopusattack_mj_latest_pass_2
               oval_race
               destruction_derby
               #ifdef HX_WII
               queen
               #endif
               story_outro_ip
               ;vanilla
               auditions
               demolition_intro
               shock_band
               rocktopus
               castle
               rock_the_crop
               alien_abduction
               dino_chase
               rock_lobster
               rock_the_boat
               paranoia_and_the_pig
               alien_signing
               ufo_breakdown
               moon_set_up
               stop_the_rock
               story_outro
            )
         }
         {$this set_focus venue.lst}
         {venue.lst set_selected [selection_memory]}
      }
   )
   (BUTTON_DOWN_MSG
      {if {== $action kAction_Cancel}
         {synth play button_back}
      }
      kDataUnhandled
   )
   (SELECT_MSG
      {do
         {set $fake_cut_enter TRUE}
         {cutscene set_current_cutscene {venue.lst selected_sym}}
         {cutscene set replay 1}
         {$this setup_users}
         {if {== {cutscene get_current_cutscene} auditions}
            {cutscene set_required_driver
               {switch {$player get_track_type}
                  (kTrackGuitar guitar.cutdrv)
                  (kTrackDrum drum.cutdrv)
                  (kTrackVocals vocal.cutdrv)
                  (kTrackBass bass.cutdrv)
                  guitar.cutdrv
               }
               guitar.cutdrv
            }
         }
         {synth play button_select}
         {ui goto_screen cutscene_loading_screen_1}
      }
   )
   (SCROLL_MSG
      {synth play button_focus}
      {$this set selection_memory {venue.lst selected_pos}}
   )
}
{new MainScreen
   cutscene_menuscreen
   (back bonus_menuscreen)
   (panels meta movie_panel cutscene_menupanel tour_lower3rd_panel)
   (focus cutscene_menupanel)
   (helpbar
      (
         (cancel helpbar_back)
         (confirm helpbar_confirm)
      )
   )
}
{new BandScreen
   cant_create_band_screen
   (panels dialog_panel)
   (focus dialog_panel)
   (message cant_create_band)
   (helpbar ((confirm helpbar_select)))
   (enter {dialog_panel set_ok {localize [message]}})
   (SELECT_MSG {ui pop_screen})
}
{new UIPanel
   play_a_show_panel
   (file "../../ulti/play_a_show.milo")
   (filters
      (
         song_and_artist
         artist
         gender
         genre
         length
         year
      )
   )
   (played_songs)
   (songs)
   (options)
   (current_set)
   (current_filters)
   (voted)
   (counting)
   (wait_time)
   (can_vote)
   (guitar_vote)
   (bass_vote)
   (drum_vote)
   (vocals_vote)
   (enter
      #ifndef _SHIP
      {print "play a show panel enter\n"}
      #endif
      {if {gamemode get is_tour}
         {Title.lbl set_showing FALSE}
         {set [played_songs] {array 0}}
      }
      {songs.lst set_local_pos 90.00 0.00 97.53}
      {subtitle.btn set_local_pos -74.62 -4.86 172.76}
      {icons.lst set_local_pos -440.00 0.00 97.53}
      {icons.lst set_data ("" "" "" "" "")}
      {buttons.lst set_local_pos -395.00 0.00 97.53}
      #ifdef HX_WII
      {buttons.lst set_data ("gA" "rB" "yY" "bX" "ys")}
      #else
      {buttons.lst set_data ("gA" "rB" "yY" "bX" "yR")}
      #endif
      {song0.lbl set alignment kMiddleLeft}
      {song0.lbl set text_size 18.00}
      {song0.lbl set fixed_length 21}
      {song0.lbl set_local_pos -195.00 0.00 159}
      {song2.lbl set alignment kMiddleLeft}
      {song2.lbl set text_size 18.00}
      {song2.lbl set fixed_length 21}
      {song2.lbl set_local_pos -195.00 0.00 139}


      {song1.lbl set alignment kMiddleRight}
      {song1.lbl set text_size 18.00}
      {song1.lbl set fixed_length 21}
      {song1.lbl set_local_pos 195.00 0.00 159}
      {song3.lbl set alignment kMiddleRight}
      {song3.lbl set text_size 18.00}
      {song3.lbl set fixed_length 21}
      {song3.lbl set_local_pos 195.00 0.00 139}

      {StudBG_04.mesh set_local_pos 161.36 -3.13 185.43}

      {timer.lbl set_localized ""}
      {timer.lbl set text_size 18.00}
      {timer.lbl set_local_pos 160.50 0.00 185.76}

      {set [current_set] {array 0}}
      {$this do_stuff}
   )
   (exit
      {set [current_set] 0}
      {set [songs] 0}
      {set [options] 0}
      {set [current_filters] 0}
      {set [voted] 0}
   )
   (do_stuff
      #ifndef _SHIP
      {print "resetting stuff\n"}
      #endif
      {set [songs] {array 0}}
      {set [options] {array 0}}
      {set [current_filters] {array 0}}
      {set [voted] {array 0}}
      {set [counting] FALSE}
      {set [can_vote] TRUE}
      {icons.lst set_data ("" "" "" "" "")}
      #ifndef _SHIP
      {print "doing song stuff\n"}
      #endif
      ; clear played songs if almost out so it doesn't lock up
      {if {>= {size [played_songs]} {- {song_offer_provider num_data} 5}}
         {set [played_songs] {array 0}}
      }
      {while {!= {size [songs]} 4} {do
         ($song {random_int 0 {song_offer_provider num_data}})
         ($song_sym {song_offer_provider data_symbol $song})
         {unless
            {||
               {find_elem [played_songs] $song_sym}
               {find_elem [current_set] $song_sym}
               {find_elem [songs] $song}
               {! {song_offer_provider is_song $song}}
               {song_mgr has_missing_parts $song_sym {gamemode get missing_part_type}}
            }
            {push_back [songs] $song}
         }
      }}
      #ifndef _SHIP
      {print "doing filter stuff\n"}
      #endif
      {foreach_int $elem 0 4 {do
         ($filters {array [filters]}) ; something is fucked with how arrays work. just doing ($filters [filters]) results in it not resetting properly.
         ($offer {song_offer_provider get_song_offer {elem [songs] $elem}})
         {unless
            {&&
               {$offer has_data song_length}
               {||
                  {<= {$offer get_data (song_length)} 180000}
                  {> {$offer get_data (song_length)} 300000}
               }
            }
            {remove_elem $filters length}
         }
         {unless {$offer has_data year_released}
            {remove_elem $filters year}
         }
         {foreach $filter [current_filters]
            {if {find_elem $filters $filter}
               {remove_elem $filters $filter}
            }
         }
         {push_back [current_filters] {random_elem $filters}}
      }}
      #ifndef _SHIP
      {print "doing hacky option stuff\n"}
      #endif
      {foreach_int $elem 0 4 {do
         ($offer {song_offer_provider get_song_offer {elem [songs] $elem}})
         {push_back [options]
            {switch {elem [current_filters] $elem}
               (song_and_artist
                  {sprintf {localize vote_song_and_artist_fmt} {$offer get_data (name)} {$offer artist}}
               )
               (artist
                  {sprintf {localize vote_obfuscate_song_by_artist_fmt} {$offer artist}}
               )
               (gender
                  {sprintf {localize vote_obfuscate_song_by_gender_fmt} {$offer get_data (vocal_gender)}}
               )
               (genre
                  {sprintf {localize vote_obfuscate_song_by_genre_fmt} {localize {$offer get_data (genre)}}}
               )
               (length
                  {sprintf {localize vote_obfuscate_song_by_length_fmt}
                     {localize
                        {do
                           ($length {$offer get_data (song_length)})
                           {cond
                              ({<= $length 180000} short)
                              ({<= $length 420000} long)
                              very_long
                           }
                        }
                     }
                  }
               )
               (year
                  {sprintf {localize vote_obfuscate_song_by_year_fmt}
                     {$offer get_data (year_released)}
                  }
               )
               {fail {elem [current_filters] $elem} " isn't a valid filter\n"}
            }
         }
      }}
      #ifndef _SHIP
      {print "hacky option stuff done\n"}
      #endif

      {push_back [options] moreinfo}
      {songs.lst set_data [options]}
   )
   (add_song
      ($elem)
      {push_back [current_set] {song_offer_provider data_symbol {elem [songs] $elem}}}
      {if_else {gamemode get is_tour}
         ; what do you mean you can't read this
         {foreach_int $i {max 0 {- {size [current_set]} 4}} {size [current_set]}
            {{sprintf "song%d.lbl" {- $i {max 0 {- {size [current_set]} 4}}}} set_localized
               {sprintf
                  "%d. %s"
                  {+ $i 1}
                  {
                     {song_offer_provider get_song_offer
                        {song_offer_provider data_index {elem [current_set] $i}}
                     }
                     get_data (name)
                  }
               }
            }
         }
         {{sprintf "song%d.lbl" {- {size [current_set]} 1}} set_localized
            {{song_offer_provider get_song_offer {elem [songs] $elem}} get_data (name)}
         }
      }
      #ifndef _SHIP
      {print_array [current_set]}
      {do
         ($offer {song_offer_provider get_song_offer {elem [songs] $elem}})
         {cheat_display show {sprint "added " {$offer get_data (name)} " by " {$offer artist} " to setlist :3"}}
      }
      #endif
      {if_else
         {if_else {gamemode get is_tour}
            {== {size [current_set]} {{{tour band} gig} num_songs}}
            {== {size [current_set]} {max 2 {user_mgr get_num_participants}}}
         }
         {thread_task kTaskSeconds (script
            {$this iterate BandList $lst {$lst set_showing FALSE}}
            {$task sleep 3}
            {foreach $song [current_set]
               {push_back [played_songs] $song}
            }
            {meta_performer set_songs [current_set]}
            {song_select_panel move_on}
         )}
         {$this do_stuff}
      }
   )
   (start_timer
      {set [counting] TRUE}
      {set [wait_time]
         {if_else {== {user_mgr get_num_participants} 1} 0.33 1}
      }
      {thread_task kTaskSeconds (script
         {timer.lbl set_localized "9"}
         {$task sleep [wait_time]}
         {timer.lbl set_localized "8"}
         {$task sleep [wait_time]}
         {timer.lbl set_localized "7"}
         {$task sleep [wait_time]}
         {timer.lbl set_localized "6"}
         {$task sleep [wait_time]}
         {timer.lbl set_localized "5"}
         {$task sleep [wait_time]}
         {timer.lbl set_localized "4"}
         {$task sleep [wait_time]}
         {timer.lbl set_localized "3"}
         {$task sleep [wait_time]}
         {timer.lbl set_localized "2"}
         {$task sleep [wait_time]}
         {timer.lbl set_localized "1"}
         {$task sleep [wait_time]}
         {timer.lbl set_localized " "}
         {$this finalize_vote}
      )}
   )
   (finalize_vote
      {set [can_vote] FALSE}
      {do
         ($array {array (0 0 0 0 0)})
         ($target 0)
         ($not_done TRUE)
         {foreach $voter [voted] {do
            ($elem {$this get {symbol $voter "_vote"}})
            {set_elem $array $elem {+ {elem $array $elem} 1}}
         }}
         {foreach $vote $array
            {if {> $vote $target}
               {set $target $vote}
            }
         }
         {while $not_done {do
            ($rand {random_int 0 5})
            {if {== {elem $array $rand} $target}
               {set $target $rand}
               {set $not_done FALSE}
            }
         }}
         {if {!= {user_mgr get_num_participants} 1} {do
            ($array {array ("" "" "" "" "")})
            {foreach $voter [voted] {do
               ($elem {$this get {symbol $voter "_vote"}})
               {if {== $target $elem}
                  {set_elem $array $elem {sprint {elem $array $elem} {switch $voter (guitar "G") (bass "B") (vocals "V") (drum "D")}}}
               }
            }}
            {icons.lst set_data $array}
         }}
         {thread_task kTaskSeconds (script
            {$task sleep 1.2}
            {if_else {== $target 4}
               {$this do_stuff}
               {$this add_song $target}
            }
         )}
      }
   )
   (BUTTON_DOWN_MSG
      {if {&& {$player is_participating} {find_elem (kPad_X kPad_Circle kPad_Tri kPad_Square kPad_L1 kPad_R1 #ifdef HX_WII kPad_Select #endif) $raw_button} [can_vote]} {do
         ($inst
            {if_else {&& {== {$player get_controller_sym} guitar} {!= {$player slot_num} 0}}
               bass
               {$player get_controller_sym}
            }
         )
         {$this set {symbol $inst "_vote"}
            {switch $raw_button
               (kPad_X 0)
               (kPad_Circle 1)
               (kPad_Tri 2)
               (kPad_Square 3)
               ((kPad_L1 kPad_R1 #ifdef HX_WII kPad_Select #endif) 4)
            }
         }
         {unless {find_elem [voted] $inst}
            {push_back [voted] $inst}
         }
         {do
            ($array {array ("" "" "" "" "")})
            {foreach $voter [voted] {do
               ($elem {$this get {symbol $voter "_vote"}})
               {set_elem $array $elem {sprint {elem $array $elem} {switch $voter (guitar "G") (bass "B") (vocals "V") (drum "D")}}}
            }}
            {icons.lst set_data $array}
         }
         {if {&& {! [counting]} {== {size [voted]} {user_mgr get_num_participants}}}
            {$this start_timer}
         }
      }}
      {if [can_vote]
         {switch $action
            (kAction_Start
               {taskmgr clear_tasks}
               {ui goto_screen {song_select_get_back_screen}}
            )
         }
      }
   )
   (unload
      {foreach $panel
         {
            {if_else {gamemode get is_tour}
               play_a_show_tour_screen
               play_a_show_screen
            }
            get unused_panels
         }
         {$panel set_showing TRUE}
      }
      {if {gamemode get is_tour}
         {difficulty_screen set cancel_screen garage_gigscreen}
      }
   )
}
{new BandScreen
   play_a_show_screen
   (panels
      meta
      song_sync_panel
      postsong_sfx_panel
      movie_panel
      song_select_details_panel
      song_select_panel
      song_select_lower3rd_panel
      play_a_show_panel
   )
   (focus play_a_show_panel)
   (helpbar ((state_confirm option_exit)))
   (unused_panels
      (
         song_sync_panel
         postsong_sfx_panel
         movie_panel
         song_select_details_panel
         song_select_panel
         song_select_lower3rd_panel
      )
   )
   (enter
      {foreach $panel [unused_panels]
         {$panel set_showing FALSE}
      }
   )
   (exit {reset_random_selection})
}
{new BandScreen
   play_a_show_tour_screen
   (panels
      meta
      postsong_sfx_panel
      song_select_details_panel
      song_select_panel
      tour_world_lower3rd_panel
      song_sync_panel
      play_a_show_panel
   )
   (unused_panels
      (
         meta
         postsong_sfx_panel
         song_select_details_panel
         song_select_panel
         tour_world_lower3rd_panel
         song_sync_panel
      )
   )
   (focus play_a_show_panel)
   (helpbar ((state_confirm option_exit)))
   (enter
      {foreach $panel [unused_panels]
         {$panel set_showing FALSE}
      }
   )
   (exit {reset_random_selection})
}
{new BandScreen
   jukebox_game_screen
   (panels game world_panel coop_track_panel sync_audio_net_panel)
   GAME_SCREEN_HANDLERS
   (BUTTON_DOWN_MSG
      {switch $raw_button
         (kPad_Square {ulti_cycle_free_camera})
         (kPad_Tri {toggle_time_paused})
         kDataUnhandled
      }
   )
}
#ifndef _SHIP
{new UIPanel
   camera_debug_game_panel
   (enter
      {print "######################\n"}
      {print "# CAMERA DEBUG ENTER #\n"}
      {print "######################\n"}
      {set $camera.disable_picking 1}
      {camera_debug_game_screen set shot 1}
      {camera_debug_game_screen set bad_shot 0}
      {do
         ($array {array 0})
         {$world iterate BandCamShot $bcs
            {push_back $array {$bcs name}}
         }
         {camera_debug_game_screen set shots $array}
      }
      {camera_debug_game_screen set good_shots {array 0}}
      {camera_debug_game_screen update_shot}
   )
   (exit
      {print "#####################\n"}
      {print "# CAMERA DEBUG EXIT #\n"}
      {print "#####################\n"}
   )
}
{new BandScreen
   camera_debug_game_screen
   (panels
      game
      world_panel
      coop_track_panel
      camera_debug_game_panel
      sync_audio_net_panel
   )
   GAME_SCREEN_HANDLERS
   (back splash_screen)
   (shot 1)
   (bad_shot 0)
   (shots ())
   (good_shots ())
   (BUTTON_DOWN_MSG
      {switch $raw_button
         (kPad_X
            {set [bad_shot] 1}
            {while {== [bad_shot] 1}
               {'++' [shot]}
               {if {== [shot] {size [shots]}}
                  {set [shot] 1}
               }
               {$this update_shot}
            }
         )
         (kPad_Circle
            {set [bad_shot] 1}
            {while {== [bad_shot] 1}
               {-- [shot]}
               {if {== [shot] 0}
                  {set [shot] {- {size [shots]} 1}}
               }
               {$this update_shot}
            }
         )
         (kPad_Tri {toggle_time_paused})
         (kPad_Square {ulti_cycle_free_camera})
         (kPad_L1
            {if {size [good_shots]}
               {resize [good_shots]
                  {- {size [good_shots]} 1}
               }
            }
         )
         (kPad_R1
            {unless {find_elem [good_shots] {elem [shots] [shot]}}
               {push_back [good_shots] {elem [shots] [shot]}}
            }
         )
         (kPad_R2 {print_array [good_shots]})
         kDataUnhandled
      }
   )
   (update_shot
      {do
         ($i {elem [shots] [shot]})
         {if_else {$world exists $i}
            {do
               ($world_shot {$world find $i})
               {cond
                  ({!
                        {$world_shot platform_ok}}
                     {cheat_display show {sprint "wrong platform: " $i}}
                     {set [bad_shot] 1}
                  )
                  ({!
                        {$world_shot get enabled}}
                     {cheat_display show {sprint "shot disabled: " $i}}
                     {set [bad_shot] 1}
                  )
                  ;({find_elem
                  ;      (LOSE WIN WIN_PRE WIN_POST WIN_P1 WIN_P2 WIN_TIE WIN_QUICK INTRO INTRO_VENUE INTRO_QUICK INTRO_MULTI OUTRO OUTRO_MULTI)
                  ;      {$world_shot get category}}
                  ;   {cheat_display show
                  ;      {sprint
                  ;         "skipping shot category "
                  ;         {$world_shot get category}
                  ;         " "
                  ;         $world_shot
                  ;      }
                  ;   }
                  ;   {set [bad_shot] 1}
                  ;)
                  {handle ($world start)}
                  {handle ($world intro_start)}
                  {$world force_shot $world_shot}
                  {cheat_display show
                     {sprint [shot] ": " $i}
                  }
                  {set [bad_shot] 0}
               }
            }
            {cheat_display show {sprint "couldn't find: " $i}}
         }
      }
   )
}
#endif