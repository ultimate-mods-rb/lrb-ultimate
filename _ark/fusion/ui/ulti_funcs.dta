{func tolower ; fuck you harmonix
   ($string)
   {search_replace $string "A" "a" $string}
   {search_replace $string "B" "b" $string}
   {search_replace $string "C" "c" $string}
   {search_replace $string "D" "d" $string}
   {search_replace $string "E" "e" $string}
   {search_replace $string "F" "f" $string}
   {search_replace $string "G" "g" $string}
   {search_replace $string "H" "h" $string}
   {search_replace $string "I" "i" $string}
   {search_replace $string "J" "j" $string}
   {search_replace $string "K" "k" $string}
   {search_replace $string "L" "l" $string}
   {search_replace $string "M" "m" $string}
   {search_replace $string "N" "n" $string}
   {search_replace $string "O" "o" $string}
   {search_replace $string "P" "p" $string}
   {search_replace $string "Q" "q" $string}
   {search_replace $string "R" "r" $string}
   {search_replace $string "S" "s" $string}
   {search_replace $string "T" "t" $string}
   {search_replace $string "U" "u" $string}
   {search_replace $string "V" "v" $string}
   {search_replace $string "W" "w" $string}
   {search_replace $string "X" "x" $string}
   {search_replace $string "Y" "y" $string}
   {search_replace $string "Z" "z" $string}
   $string
}
{func sti
   ($str)
   {switch $str
      ("0" 0)   ("1" 1)   ("2" 2)   ("3" 3)   ("4" 4)
      ("5" 5)   ("6" 6)   ("7" 7)   ("8" 8)   ("9" 9)

      ("a" 10)  ("b" 11)  ("c" 12)  ("d" 13)  ("e" 14)  ("f" 15)
      ("g" 16)  ("h" 17)  ("i" 18)  ("j" 19)  ("k" 20)  ("l" 21)
      ("m" 22)  ("n" 23)  ("o" 24)  ("p" 25)  ("q" 26)  ("r" 27)
      ("s" 28)  ("t" 29)  ("u" 30)  ("v" 31)  ("w" 32)  ("x" 33)
      ("y" 34)  ("z" 35)

      ("A" 36)  ("B" 37)  ("C" 38)  ("D" 39)  ("E" 40)  ("F" 41)
      ("G" 42)  ("H" 43)  ("I" 44)  ("J" 45)  ("K" 46)  ("L" 47)
      ("M" 48)  ("N" 49)  ("O" 50)  ("P" 51)  ("Q" 52)  ("R" 53)
      ("S" 54)  ("T" 55)  ("U" 56)  ("V" 57)  ("W" 58)  ("X" 59)
      ("Y" 60)  ("Z" 61)

      {fail {sprint "can't decode " $str}}
   }
}
{func its
   ($int)
   {switch $int
      (0 "0")   (1 "1")   (2 "2")   (3 "3")   (4 "4")
      (5 "5")   (6 "6")   (7 "7")   (8 "8")   (9 "9")

      (10 "a")  (11 "b")  (12 "c")  (13 "d")  (14 "e")  (15 "f")
      (16 "g")  (17 "h")  (18 "i")  (19 "j")  (20 "k")  (21 "l")
      (22 "m")  (23 "n")  (24 "o")  (25 "p")  (26 "q")  (27 "r")
      (28 "s")  (29 "t")  (30 "u")  (31 "v")  (32 "w")  (33 "x")
      (34 "y")  (35 "z")

      (36 "A")  (37 "B")  (38 "C")  (39 "D")  (40 "E")  (41 "F")
      (42 "G")  (43 "H")  (44 "I")  (45 "J")  (46 "K")  (47 "L")
      (48 "M")  (49 "N")  (50 "O")  (51 "P")  (52 "Q")  (53 "R")
      (54 "S")  (55 "T")  (56 "U")  (57 "V")  (58 "W")  (59 "X")
      (60 "Y")  (61 "Z")

      {fail {sprint "can't encode " $str}}
   }
}
{func siti
   ($str)
   {do
      ($result)
      ($len {strlen $str})
      {foreach_int $elem 0 $len
         {set $result {+ {* $result 10} {sti {str_elem $str $elem}}}}
      }
      $result
   }
}
{func sftf
   ($str)
   {do
      ($dotpos {str_elemof $str "."})
      {if_else $dotpos
         {do
            ($fracpart {substr $str {+ $dotpos 1} {strlen $str}})
            {+
               {siti {substr $str 0 $dotpos}}
               {/
                  {siti $fracpart}
                  {pow 10 {strlen $fracpart}}
               }
            }
         }
         {siti $str}
      }
   }
}
{func str_elemof
   ($str $char)
   {do
      ($len {strlen $str})
      ($found)
      ($elem)
      ($return)
      {while {&& {! $found} {> $len $elem}}
         {if_else {== {str_elem $str $elem} $char}
            {do
               {set $found TRUE}
               {set $return $elem}
            }
            {++ $elem}
         }
      }
      $return
   }
}
{func pow
   ($base $exp)
   {do
      ($return 1)
      {foreach_int $i 0 $exp
         {set $return {* $return $base}}
      }
      $return
   }
}
{func set_pad_map
   ($mapping)
   {foreach $pad (analog dualshock)
      {set_elem
         {find $syscfg joypad controller_mapping $pad} 1
         {switch $mapping
            (0 joypad)
            #ifdef HX_XBOX
            (1 ro_guitar_xbox)
            #else
            (1 hx_guitar_ps3)
            #endif
            (2 ro_guitar_ps3)
            (3 guitar)
            #ifdef HX_XBOX
            (4 hx_drums_xbox)
            #else
            (4 hx_drums_ps3)
            #endif
         }
      }
   }
}
{func ulti_cycle_free_camera
   {if $world
      {do
         ($free_cam_state {$world get_free_cam_state})
         {switch $free_cam_state
            (0
               {$world toggle_free_cam $cheat_controller}
               {cheat_display show "Free camera: world"}
               {$world next_free_cam_state}
            )
            (1
               {$world set_free_cam_parent
                  {find_obj $world player_vocal Head.mesh}
               } ; normally goes off player_vocals0 bone_head.mesh which neither exist in this game so we fix :)
               {$world set_free_cam_parent_dof 0 0 1}
               {$world set_free_cam_pos 0 -70 0}
               {$world set_free_cam_rot 0 0 0}
               {cheat_display show "Free camera: vocalist"}
               {$world next_free_cam_state}
            )
            (2
               {$world set_free_cam_parent
                  {find_obj $world player_vocal Head.mesh}
               }
               {$world set_free_cam_parent_dof 1 0 1} ; normally all are 1 but that caused it to go portrait mode
               {$world set_free_cam_pos 0 -70 0}
               {$world set_free_cam_rot 0 0 0}
               {cheat_display show "Free camera: vocalist fixed"}
               {$world next_free_cam_state}
            )
            (3
               {$world toggle_free_cam $cheat_controller}
               {cheat_display show "Free camera: frozen"}
               {$world next_free_cam_state}
            )
            (4
               {$world toggle_free_cam $cheat_controller}
               {cheat_display show "Free camera: off"}
               {$world next_free_cam_state}
            )
         }
      }
   }
}