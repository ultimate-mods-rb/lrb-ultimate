#define FC_CALLBACK_ELEMS ((hit miss pass))
#define TRACK_END_FRAME (1920)
#define TRACK_PANEL_HANDLERS (
   (enter
      {foreach $obj {draw_order.grp get_array objects}
         {if {$obj is_a BandLabel}
            {draw_order.grp remove_object $obj}
         }
      }
      {unless {exists fc_bass_callback}
         {new Object
            fc_bass_callback ;remove FC groove on bass miss/pass
            (hit
               {if {! $bass_firstnote}
                  {set $bass_firstnote TRUE}
               }
               {if {! $bass_milosong}
                  {set $bass_milosong TRUE}
                  {set [num_gems_hit] 0}
                  {set [num_gems_miss] 0}
                  {set [num_gems_pass] 0}
                  {set [num_gems_combo] 0}
               }
               {$this check_fc}
               {set [num_gems_hit] {'+' [num_gems_hit] 1}}
               {set [num_gems_combo] {'+' [num_gems_combo] 1}}
            )
            (miss
               {unless {! $bass_firstnote}
                  {set [num_gems_miss] {'+' [num_gems_miss] 1}}
                  {set [num_gems_combo] 0}
                  {$this check_missed}
                  {if $fcring
                     {{{{get_track_panel} find bass} find streak_meter} star_deploy_stop}
                  }
               }
            )
            (pass
               {if {! $bass_firstnote}
                  {set $bass_firstnote TRUE}
               }
               {if {! $bass_milosong}
                  {set $bass_milosong TRUE}
                  {set [num_gems_hit] 1}
                  {set [num_gems_miss] 1}
                  {set [num_gems_pass] 1}
                  {set [num_gems_combo] 1}
               }
               {set [num_gems_pass] {'+' [num_gems_pass] 1}}
               {set [num_gems_combo] 0}
               {$this check_missed}
               {if $fcring
                  {{{{get_track_panel} find bass} find streak_meter} star_deploy_stop}
               }
            )
            (check_fc
               {$this check_missed}
               {if {== {'+' [num_gems_pass] [num_gems_miss]} 0}
                  {if $fcring
                     {{{{get_track_panel} find bass} find streak_meter} star_deploy}
                  }
               }
            )
            (check_missed
               {if {> {'+' [num_gems_miss] [num_gems_pass]} 0}
                  {if $fcring
                     {{{{get_track_panel} find bass} find streak_meter} star_deploy_stop}
                  }
               }
            )
            (num_gems_hit 0)
            (num_gems_combo 0)
            (num_gems_miss 0)
            (num_gems_pass 0)
         }
         {new Object
            fc_guitar_callback ;remove FC groove on guitar miss/pass
            (hit
               {if {! $guitar_firstnote}
                  {set $guitar_firstnote TRUE}
               }
               {if {! $guitar_milosong}
                  {set $guitar_milosong TRUE}
                  {set [num_gems_hit] 0}
                  {set [num_gems_miss] 0}
                  {set [num_gems_pass] 0}
                  {set [num_gems_combo] 0}
               }
               {$this check_fc}
               {set [num_gems_hit] {'+' [num_gems_hit] 1}}
               {set [num_gems_combo] {'+' [num_gems_combo] 1}}
               {unless $legacybass
                  {if {&& {> [num_gems_combo] 29} {! $guitar_groove_active}}
                     {set $guitar_groove_active TRUE}
                     {{{{get_track_panel} find guitar} find BassSuperStreak_ON.trig} trigger}
                  }
               }
            )
            (miss
               {unless {! $guitar_firstnote}
                  {set [num_gems_miss] {'+' [num_gems_miss] 1}}
                  {set [num_gems_combo] 0}
                  {$this check_missed}
                  {if $fcring
                     {{{{get_track_panel} find guitar} find streak_meter} star_deploy_stop}
                  }
               }
            )
            (pass
               {if {! $guitar_firstnote}
                  {set $guitar_firstnote TRUE}
               }
               {if {! $guitar_milosong}
                  {set $guitar_milosong TRUE}
                  {set [num_gems_hit] 1}
                  {set [num_gems_miss] 1}
                  {set [num_gems_pass] 1}
                  {set [num_gems_combo] 1}
               }
               {set [num_gems_pass] {'+' [num_gems_pass] 1}}
               {set [num_gems_combo] 0}
               {$this check_missed}
               {if $fcring
                  {{{{get_track_panel} find guitar} find streak_meter} star_deploy_stop}
               }
            )
            (check_fc
               {$this check_missed}
               {if {== {'+' [num_gems_pass] [num_gems_miss]} 0}
                  {if $fcring
                     {{{{get_track_panel} find guitar} find streak_meter} star_deploy}
                  }
               }
            )
            (check_missed
               {if {> {'+' [num_gems_miss] [num_gems_pass]} 0}
                  {if $fcring
                     {{{{get_track_panel} find guitar} find streak_meter} star_deploy_stop}
                  }
               }
               {unless $legacybass
                  {if {&& {< [num_gems_combo] 29} $guitar_groove_active}
                     {set $guitar_groove_active FALSE}
                     {{{{get_track_panel} find guitar} find BassSuperStreak_OFF.trig} trigger}
                  }
               }
            )
            (num_gems_hit 0)
            (num_gems_combo 0)
            (num_gems_miss 0)
            (num_gems_pass 0)
         }
         {new Object
            fc_drum_callback ;remove FC groove on drum miss/pass
            (hit
               {if {! $drum_firstnote}
                  {set $drum_firstnote TRUE}
               }
               {if {! $drum_milosong}
                  {set $drum_milosong TRUE}
                  {set [num_gems_hit] 0}
                  {set [num_gems_miss] 0}
                  {set [num_gems_pass] 0}
                  {set [num_gems_combo] 0}
               }
               {$this check_fc}
               {set [num_gems_hit] {'+' [num_gems_hit] 1}}
               {set [num_gems_combo] {'+' [num_gems_combo] 1}}
               {unless $legacybass
                  {if {&& {> [num_gems_combo] 29} {! $drum_groove_active}}
                     {set $drum_groove_active TRUE}
                     {{{{get_track_panel} find drum} find BassSuperStreak_ON.trig} trigger}
                  }
               }
            )
            (miss
               {unless {! $drum_firstnote}
                  {set [num_gems_miss] {'+' [num_gems_miss] 1}}
                  {set [num_gems_combo] 0}
                  {$this check_missed}
                  {if $fcring
                     {{{{get_track_panel} find drum} find streak_meter} star_deploy_stop}
                  }
               }
            )
            (pass
               {if {! $drum_firstnote}
                  {set $drum_firstnote TRUE}
               }
               {if {! $drum_milosong}
                  {set $drum_milosong TRUE}
                  {set [num_gems_hit] 1}
                  {set [num_gems_miss] 1}
                  {set [num_gems_pass] 1}
                  {set [num_gems_combo] 1}
               }
               {set [num_gems_pass] {'+' [num_gems_pass] 1}}
               {set [num_gems_combo] 0}
               {$this check_missed}
               {if $fcring
                  {{{{get_track_panel} find drum} find streak_meter} star_deploy_stop}
               }
            )
            (check_fc
               {$this check_missed}
               {if {== {'+' [num_gems_pass] [num_gems_miss]} 0}
                  {if $fcring
                     {{{{get_track_panel} find drum} find streak_meter} star_deploy}
                  }
               }
            )
            (check_missed
               {if {> {'+' [num_gems_miss] [num_gems_pass]} 0}
                  {if $fcring
                     {{{{get_track_panel} find drum} find streak_meter} star_deploy_stop}
                  }
               }
               {unless $legacybass
                  {if {&& {< [num_gems_combo] 29} $drum_groove_active}
                     {set $drum_groove_active FALSE}
                     {{{{get_track_panel} find drum} find BassSuperStreak_OFF.trig} trigger}
                  }
               }
            )
            (num_gems_hit 0)
            (num_gems_combo 0)
            (num_gems_miss 0)
            (num_gems_pass 0)
         }
      }
      {game add_sink $this}
      {with {$this loaded_dir}
         {do
            ($hwss
               {if_else {== $hwlength 1.0}
                  1.0
                  {if_else {> $hwlength 2.0}
                     {/ $hwlength 1.4}
                     {if_else {> $hwlength 1.0}
                        {/ $hwlength {+ {* 0.4 $hwlength} 0.6}}
                        {* $hwlength {+ {* -1.5 $hwlength} 2.5}}
                     }
                  }
               }
            )
            {set [view_time_easy] 
               {* {* {/ {if_else $syncdifspeeds 1.2 2.4} $hwss} $trackspeed} $speedmod}
            }
            {set [view_time_expert] 
               {* {* {/ 1.2 $trackspeed} $hwss} $speedmod}
            }
         }
      }
      {$this set_showing
         {if_else
            {'||'
               $skip_intro
               {gamemode get is_drum_trainer}
               {gamemode get is_practice}
            }
            {gamemode get show_track}
            FALSE
         }
      }
   )
   (exit {game remove_sink $this})
   (unison_hit)
   (unison_miss)
   (set_track_out)
   (set_track_in)
   (animate_track ($start $end $period $units))
   (animate_track_out)
   (animate_track_out_fast)
   (animate_track_in_fast)
   (finish_load
      {$this set_showing FALSE}
      {$this set_track_out}
   )
   (intro_start
      {$this reset}
      {$this set_showing {gamemode get show_track}}
      {$this set_track_in}
   )
   (intro_skip
      {$this reset}
      {$this set_showing {gamemode get show_track}}
      {$this set_track_out}
      {$this play_intro}
   )
   (on_reset
      {beatmatch foreach_active_player $m
         {$m on_new_track}
         {{$m track} init {$m track}}
      }
      {{$this loaded_dir} reset}
   )
   (on_extend
      {beatmatch foreach_active_player $player ;handle adding the appropriate callbacks to each player
         {switch {$player instrument}
            (bass {$player add_sink fc_bass_callback FC_CALLBACK_ELEMS})
            (guitar {$player add_sink fc_guitar_callback FC_CALLBACK_ELEMS})
            (drum {$player add_sink fc_drum_callback FC_CALLBACK_ELEMS})
         }
         {unless {|| {! $countdown} {gamemode get is_practice} {gamemode get is_drum_trainer} {challenge_mgr has_challenge}}
            {do
               ($obj {sprint {$player instrument} "_countdown"})
               {print $str " " $slot "\n"}
               {if {exists $obj} {delete $obj}}
               {new Object $obj}
               {$obj set_type countdown}
               {$obj init
                  {$player instrument}
                  {
                     {sprint "endgame_feedback_"
                        {if_else {== {$player instrument} vocals}
                           vox
                           {do
                              ($str {sprint {{$player instrument} get player_feedback}})
                              {sprint 0 {str_elem $str {- {strlen $str} 1}}}
                           }
                        }
                     }
                     find end_game_drum.lbl
                  }
               }
            }
         }
      }
      {$this play_intro}
      {if {&& {exists gamemode} {gamemode get play_track_intro_sfx}}
         {synth play track_beg.cue}
      }
      {if_else {== {gamemode in_mode} practice}
         {do
            {unless {> {gamecfg get practice_speed} 0}
               {beatmatch set_music_speed $speedmod}
            }
            {if {> {gamecfg get practice_speed} 0}
               {beatmatch set_music_speed $modifier}
            }
         }
         {beatmatch set_music_speed $speedmod}
      }
   )
)
{new TrackPanel
   coop_track_panel
   (file ../track/trackpanel.milo)
   TRACK_PANEL_HANDLERS
}
{new TrackPanel
   h2h_track_panel
   (file
      {if_else {== {{game get_participant_config 0} get_track_sym} vocals}
         ../track/trackpanel_h2h_vocals.milo
         ../track/trackpanel_h2h.milo
      }
   )
   TRACK_PANEL_HANDLERS
}
{func get_track_panel
   {gamemode get track_panel}
}
{set $playback_file ""}